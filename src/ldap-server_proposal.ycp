/**
 * File:	clients/ldap-server_proposal.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Proposal function dispatcher.
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 *
 * Proposal function dispatcher for ldap-server configuration.
 * See source/installation/proposal/proposal-API.txt
 */

{

textdomain "ldap-server";

import "LdapServer";
import "YaPI::LdapServer";
import "LdapServerConf";
import "Ldap";
import "HTML";
import "Label";
import "Mode";
import "Popup";
import "Report";
import "Progress";
import "Users";
import "Require";
import "String";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("LdapServer proposal started");
y2milestone( "Arguments: %1", WFM::Args() );

string func = (string) WFM::Args(0);
map param = (map) WFM::Args(1);
map ret = $[];


/* create a textual proposal */
if(func == "MakeProposal") {
    string proposal = "";
    string warning = nil;
    symbol warning_level = nil;
    boolean force_reset = param["force_reset"]:false;


    if( force_reset || !LdapServerConf::proposal_changed )
    {
        if (force_reset && LdapServerConf::wroteDatabase)
        {
	    /* error popup */
            Report::Warning( _("The LDAP database has already been created. You can change the settings later in the installed system.") );
        }
        else
        {
            if (!Require::IsPackageInstalled ("openldap2"))
            {
                y2milestone ("Openldap2 is not installed. --> service disabled");
                LdapServer::WriteServiceEnabled (false);
            }
            else
            {
                LdapServer::WriteServiceEnabled( true );
            }
            map bash_out = (map<string,any>)SCR::Execute( .target.bash_output, "/bin/hostname -d" );
            string domain = (string)bash_out["stdout"]:"";
            domain = substring( domain, 0, size(domain)-1 );
            y2milestone( "domain is '%1'", domain );
            list<string> dnlist = splitstring( domain, "." );
            y2milestone( "dnlist is '%1'", dnlist );
            string new_basedn = "";
            foreach( string dn, dnlist, { new_basedn = new_basedn + "dc=" + dn + ","; } );

            LdapServerConf::baseDN = substring( new_basedn, 0, size( new_basedn )-1 );
            LdapServerConf::rootDN = "cn=Administrator,"+LdapServerConf::baseDN;
            LdapServerConf::rootPW = Users::GetRootPassword();
            LdapServerConf::enctype = "SSHA";
            LdapServer::WriteUseRootPW( true );
        }
    }

    //y2error( "sysconfig var is '%1'", SCR::Read( .sysconfig.openldap.OPENLDAP_REGISTER_SLP ) );

    if( LdapServer::ReadServiceEnabled() )
    {
        string rootPWString = "";
        if( LdapServerConf::rootPW == Users::GetRootPassword() )
        {
                /*proposal password information*/
            rootPWString = _("[root password]");
        } else
        {
                /*proposal password information*/
            rootPWString = _("[manually set]");
        }
        if( LdapServer::ReadUseRootPW() && Users::GetRootPassword() == "" )
        {
                /* proposal error */
            warning = _("Unable to retrieve system root password.  Change password to continue.");
            warning_level = `blocker;
        }
                   /* proposal text 1/6 */
        proposal = _("LDAP Server Configuration:") + HTML::Newline() +
                                       /* proposal text 2/6 */
              HTML::List( [ _("Base DN: ") + LdapServerConf::baseDN,
                                       /* proposal text 3/6 */
                            _("Root DN: ") + LdapServerConf::rootDN,
                                       /* proposal text 4/6 */
                            _("LDAP Password: ") + rootPWString
                          ] ) +
                                       /* proposal text 5/6 */
              _("Start LDAP Server: ") + HTML::Bold( _("YES") ) + HTML::Newline() +
                                       /* proposal text 6/6 */
              _("Register at SLP Daemon: ") + HTML::Bold( LdapServerConf::registerSLP ? _("YES") : _("NO") );
    } else
    {
                   /* proposal text extra */
        proposal = _("Start LDAP Server: ") + HTML::Bold( _("NO") );
    }


    ret = $[
	"preformatted_proposal" : proposal,
	"warning_level" : warning_level,
	"warning" : warning,
    ];
}
/* run the module */
else if(func == "AskUser") {
    map stored = nil;
    symbol seq = nil;
    if( LdapServerConf::wroteDatabase )
    {
                    /* error popup */
        Report::Warning( _("The LDAP database has already been created. You can change the settings later in the installed system.") );
        seq = `back;
    } else
    {
        stored = LdapServer::Export();
        seq = (symbol) WFM::CallFunction("ldap-server", [.propose]);
        if(seq != `next) LdapServer::Import(stored);
    }
    y2debug("stored=%1",stored);
    y2debug("seq=%1",seq);
    ret = $[
    "workflow_sequence" : seq
    ];
}
/* create titles */
else if(func == "Description") {
    ret = $[
	/* Rich text title for LdapServer in proposals */
	"rich_text_title" : _("OpenLDAP Server"),
	/* Menu title for LdapServer in proposals */
	"menu_title" : _("Open&LDAP Server"),
	"id" : "ldap-server",
    ];
}
/* write the proposal */
else if(func == "Write") {
    if( LdapServerConf::wroteDatabase ) return ret;
    LdapServerConf::wroteDatabase = true;

    if( LdapServer::ReadServiceEnabled() )
    {
	/* ensure openldap2 package is installed */
	if( !Require::RequireAndConflictTarget( ["openldap2"], [], 
						// notification about package needed 1/2
						_("<p>To configure the LDAP server, the <b>%1</b> package must be installed.</p>") +
						// notification about package needed 2/2
						_("<p>Do you want to install it now?</p>")) )
	{
	    if( !Require::IsPackageAvailable( "openldap2" ) ) {
		// translators: error popup before aborting the module
		Popup::Error( sformat( _("The package '%1' is not available.
YaST2 cannot continue the configuration
without installing the package."), "openldap2" ) );
	    } else {
		// translators: error popup before aborting the module
		Popup::Error( sformat( _("YaST2 cannot continue the configuration
without installing the required packages."), "openldap2" ) );
	    }

	    return ret;
	}
    }

    //string rootPW = "";


    if( LdapServer::ReadServiceEnabled() )
    {
        Progress::off();
        LdapServer::Read();
        LdapServer::WriteServiceEnabled( true );
        LdapServer::WriteLoglevel( 0 );
        Ldap::Read();
        Progress::on();
        map ldap_defaults = Ldap::Export();
        y2debug( "ldap settings map: %1", ldap_defaults );

        //map bash_out = (map<string,any>)SCR::Execute( .target.bash_output, "/bin/hostname --long" );
        //string fqdn = (string)bash_out["stdout"]:"";
        //fqdn = substring( fqdn, 0, size(fqdn)-1 );

        ldap_defaults["ldap_server"] = "localhost";
        ldap_defaults["base_config_dn"] = "ou=ldapconfig,"+LdapServerConf::baseDN;
        ldap_defaults["bind_dn"] = LdapServerConf::rootDN;
        ldap_defaults["ldap_domain"] = LdapServerConf::baseDN;
        ldap_defaults["ldap_tls"] = false;
        ldap_defaults["file_server"] = true;
        ldap_defaults["create_ldap"] = true;

        if( LdapServerConf::useCommonCA )
        {
            if( !YaPI::LdapServer::CheckCommonServerCertificate() )
            {
                               /* Error popup */
                Report::Error( _("OpenLDAP Server: Common server certificate not available.
StartTLS is disabled.") );
                LdapServerConf::useCommonCA = false;
                ldap_defaults["ldap_tls"] = false;
            } else
            {
                LdapServer::WriteConfigureCommonServerCertificate( true );
                ldap_defaults["ldap_tls"] = true;
            }
        }

        LdapServer::WriteSLPEnabled( LdapServerConf::registerSLP );

        LdapServer::AddDatabase( $[ "database":"bdb",
                                    "suffix": LdapServerConf::baseDN,
                                    "rootdn" : LdapServerConf::rootDN,
                                    "passwd" : LdapServerConf::rootPW,
                                    "cryptmethod" : LdapServerConf::enctype,
                                    "directory" : "/var/lib/ldap"
                                  ] );
        y2debug( "ldap settings map after setting: %1", ldap_defaults );
        Ldap::SetDefaults( ldap_defaults );
        Ldap::SetBindPassword( LdapServerConf::rootPW );
    }

    LdapServer::Write();

    //be paranoid
    LdapServerConf::rootPW = "";
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
}

/* Finish */
y2debug("ret=%1",ret);
y2milestone("LdapServer proposal finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}
