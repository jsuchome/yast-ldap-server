{
    textdomain "ldap-server";
    module "LdapDatabase";
    import "Label";
    import "LdapServer";
    import "LdapPopup";
    import "Popup";
    import "Sequencer";
    import "String";
    import "Wizard";


    map <string, any> baseDb = $[ "rootdn" : "cn=Administrator", "directory" : "/var/lib/ldap" ];
    map <string, any> ppolicyNew = $[];
    list <map> acllist = [];

    string ldapconf_basedn = "";
    boolean createDbDir = false;


    term editPolicy =
        `Top(
            `VBox(
                `VSpacing( 1 ),
                `Heading( _("Password Policy Settings") ),
                `VBox( `VSpacing(0.25),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_overlay ),`opt(`notify ),
                            _("Enable Password Policies"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_hashcleartext ),
                            _("Hash Clear Text Passwords"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_uselockout ),
                            _("Disclose \"Account Locked\" Status"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `VSquash(
                        `HBox(
                            `InputField( `id( `te_ppolicy_defaultpolicy ),
                                `opt( `hstretch ),
                                _("Default Policy Object DN"), "cn=Default Policy"
                            ),
                            `HSpacing( 0.5 ),
                            `VBox(
                                `Bottom(
                                    `CheckBox( `id( `cb_pp_append_basedn ),
                                            _("&Append Base DN"), true
                                    )
                                ),
                                `VSpacing( 0.3 )
                            )
                        )
                    ),
                    `VSpacing(0.25)
                )
            )
        );

    global define symbol AddDbBasic( boolean createDefaults )
    {
        boolean user_changed_dbdir = false;
        map <string, any> db = $[];
        integer numDbs = 0;
        if ( ! createDefaults )
        {
            list dblist = LdapServer::ReadDatabaseList();
            numDbs = size(dblist)-2; // don't count frontend and Config DB
        }
        string caption = _("New Database");

        term addDbWidget =
            `VBox(
                `Heading( _("Basic Settings") ),
                `HSquash(
                    `VBox (
                        `Left(
                            `InputField(`id( `te_basedn), `opt(`hstretch, `notify) , _("&Base DN"), "" )
                        ),
                        `VSpacing(0.5),
                        `Left(
                            `VSquash(
                                `HBox(
                                    `InputField( `id( `te_rootdn ),  _("&Administrator DN"),"cn=Administrator" ),
                                    `HSpacing(),
                                    `VBox(
                                        `Bottom(
                                            `CheckBox( `id( `cb_append_basedn ),
                                                    _("A&ppend Base DN"), true )
                                        ),
                                        `VSpacing( 0.3 )
                                    )
                                )
                            )
                        ),
                        `VSpacing(0.5),
                        `Left(
                            `Password( `id( `te_rootpw ), `opt(`hstretch),
                                    _("LDAP Administrator &Password"), "" )
                        ),
                        `Left(
                            `Password( `id( `te_valid_rootpw ), `opt(`hstretch),
                                    _("&Validate Password"), "" )
                        ),
                        `VSpacing(0.5),
                        `VSquash(
                            `HBox(
                                `Left(
                                    `InputField( `id( `te_directory ),`opt(`hstretch, `notify ),
                                            _("&Database Directory") )
                                ),
                                `HSpacing( 0.5 ),
                                `Bottom(
                                    `PushButton( `id( `pb_directory ), _("&Browse...") )
                                )
                            )
                        ),
                        `Left(
                            `CheckBox(`id( `cb_ldapconf), _("Use this database as the default for OpenLDAP clients"), true )
                        )
                    )
                )
            );
        Wizard::SetContentsButtons(caption, addDbWidget, "",
                Label::BackButton(), Label::NextButton());
        boolean append_checked = true;
        if ( createDefaults )
        {
            db = LdapServer::CreateInitialDefaults();
        }
        else
        {
            db=baseDb;
        }

        if( db["rootdn"]:"" != "" )
        {
            integer pos = search( db["rootdn"]:"", db["suffix"]:"" );
            if( pos > -1 )
            {
                db["rootdn"] = substring( db["rootdn"]:"", 0, pos-1 );
            } else
            {
                append_checked = false;
            }
        }
        UI::ChangeWidget(`id( `te_basedn), `Value, db["suffix"]:"" );
        UI::ChangeWidget(`id( `te_rootdn), `Value, db["rootdn"]:"" );
        UI::ChangeWidget(`id( `te_rootpw), `Value, db["rootpw_clear"]:"" );
        UI::ChangeWidget(`id( `te_valid_rootpw), `Value, db["rootpw_clear"]:"" );
        UI::ChangeWidget(`id( `cb_append_basedn), `Value, append_checked );
        UI::ChangeWidget(`id( `te_directory), `Value, db["directory"]:"" );

        if ( numDbs == 0 )
        {
            UI::ChangeWidget(`id( `cb_ldapconf), `Value, true );
        }
        else
        {
            UI::ChangeWidget(`id( `cb_ldapconf), `Value, false );
        }
        symbol ret = `next;
        while(true) {
            ret = (symbol)UI::UserInput();
            if( ret == `pb_directory )
            {
                string name = UI::AskForExistingDirectory( "/var/lib/ldap", _("Select Database Directory") );
                if( name != nil ) UI::ChangeWidget( `te_directory, `Value, name );
                continue;
            }
            else if ( ret == `te_directory )
            {
                user_changed_dbdir = true;
            }
            else if ( ret == `te_basedn )
            {
                if ( ( user_changed_dbdir != true ) && (numDbs > 0) ) {
                    string suffix = String::CutBlanks( (string)UI::QueryWidget( `te_basedn, `Value ) );
                    suffix = String::Replace(suffix, ",", "_");
                    suffix = String::CutRegexMatch(suffix, "[^0-9a-zA-Z_=-]", true);
                    string dbdir = "/var/lib/ldap/" + suffix;
                    UI::ChangeWidget( `te_directory, `Value, dbdir );
                }
            }
            if (ret == `abort || ret == `cancel )
            {
                if(Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            if (ret == `next ){
                string suffix = String::CutBlanks( (string)UI::QueryWidget( `te_basedn, `Value ) );
                string rootdn = String::CutBlanks( (string)UI::QueryWidget( `te_rootdn, `Value ) );
                string rootpw = (string)UI::QueryWidget( `te_rootpw, `Value );
                string directory = String::CutBlanks( (string)UI::QueryWidget( `te_directory, `Value ) );

                //check values
                if( suffix == "" )
                {
                    Popup::Error( _("Base DN must be set.") );
                    continue;
                }

                if ( ! createDefaults )
                {
                    list<map<string, string> > dblist = LdapServer::ReadDatabaseList();
                    boolean exists = false;
                    foreach(map<string, string> db, dblist, {
                        if ( suffix == db["suffix"]:"" )
                        {
                            Popup::Error( _("A database with that Base DN already exists.") );
                            exists = true;
                            break;
                        }
                    } );
                    if ( exists )
                    {
                        continue;
                    }
                }
                db["suffix"] = suffix;
                db["directory"] = directory;
                db["type"] =  "hdb";

                if( rootdn != "" && (boolean)UI::QueryWidget( `cb_append_basedn, `Value ) )
                {
                    rootdn = rootdn+","+suffix;
                }
                if( rootdn != "" )
                {
                    db["rootdn"] = rootdn;
                }
                else
                {
                    if ( haskey(db, "rootdn") )
                        db = remove(db, "rootdn");
                }

                if( rootpw != "" )
                {
                    db["rootpw_clear"] = rootpw;
                    db["pwenctype"] = "SSHA";
                }
                else
                {
                    if ( haskey(db, "rootpw_clear") )
                        db = remove(db, "rootpw_clear");

                    if ( haskey(db, "pwenctype") )
                        db = remove(db, "pwenctype");
                }

                if( db["rootpw_clear"]:"" != "" && db["rootdn"]:"" == "" )
                {
                    Popup::Error( _("Root DN must be set if a password is given.") );
                    continue;
                }
                if( db["rootpw_clear"]:"" != "" && db["rootpw_clear"]:"" != (string)UI::QueryWidget( `te_valid_rootpw, `Value ) )
                {
                    Popup::Error( _("Password validation failed.") );
                    continue;
                }
                if ( ! LdapServer::CheckDatabase( db ) )
                {
                    map<string, string> err = LdapServer::ReadError();
                    Popup::Error( err["msg"]:"" + "\n" + err["details"]:"" );
                    continue;
                }
                if( db["directory"]:"" == "" )
                {
                    Popup::Error( _("A directory must be specified.") );
                    continue;
                }
                if ( SCR::Read(.target.dir, db["directory"]:"" ) == nil ) {
                    boolean res = Popup::AnyQuestion(Label::ErrorMsg(),
                                        _("The directory does not exist. Create it?"),
                                        Label::YesButton(), Label::NoButton(), `focus);
                    if ( res == false ) {
                        continue;
                    } else {
                        y2debug( "Create dir == true" );
                        createDbDir = true;
                    }
                }



                if( (boolean)UI::QueryWidget( `cb_ldapconf, `Value ) )
                {
                    ldapconf_basedn = suffix;
                }
                baseDb = db;
                break;
            }
        }
        return ret;
    }

    define symbol DbSyncProv()
    {
        string caption = _("Syncprov settings");
        term contents = `Label("");
        Wizard::SetContentsButtons(caption, contents, "",
                Label::BackButton(), Label::NextButton());
        symbol ret = `next;
        while(true) {
            ret = (symbol)UI::UserInput();
            if (ret == `abort || ret == `cancel )
            {
                if(Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            if (ret == `next )
                break;
        }
        return ret;
    }

    global boolean DbPpolicyRead( integer dbindex )
    {
        map<string,any> ppolicy_map = ppolicyNew;
        if ( dbindex > 0 )
        {
            ppolicy_map = LdapServer::ReadPpolicyOverlay(dbindex);
        }
        if ( size(ppolicy_map) != 0 ){
            UI::ChangeWidget( `cb_ppolicy_overlay, `Value, true );
            boolean pp_hash_cleartext = (boolean)ppolicy_map["hashClearText"]:nil;
            boolean pp_use_lockout = (boolean)ppolicy_map["useLockout"]:nil;
            string pp_default = (string)ppolicy_map["defaultPolicy"]:nil;
            boolean pp_append_checked = false;
            map<string,any> olddb = LdapServer::ReadDatabase(dbindex);
            string suffix =  olddb["suffix"]:"";
            integer pos = search( pp_default, suffix );
            if( pos > -1 )
            {

                string chkSuffix = substring( pp_default, pos );
                if ( chkSuffix == suffix )
                {
                    pp_default = substring( pp_default, 0, pos-1 );
                    pp_append_checked = true;
                }
            }
            if ( pp_hash_cleartext ){
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Value, true );
            } else {
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Value, false );
            }
            if ( pp_use_lockout ){
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Value, true );
            } else {
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Value, false );
            }
            if ( pp_default != "" ){
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Value, pp_default );
                UI::ChangeWidget( `cb_pp_append_basedn, `Value, pp_append_checked );
            } else {
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Value, "" );
                UI::ChangeWidget( `cb_pp_append_basedn, `Value, true );
            }
        } else {
            UI::ChangeWidget( `cb_ppolicy_overlay, `Value, false );
            UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
            UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
            UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
        }
        return true;
    }

    global map<string,any> DbPpolicyWrite(integer dbindex)
    {
        if( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ){
            boolean hashcleartext = (boolean)UI::QueryWidget( `cb_ppolicy_hashcleartext, `Value );
            boolean uselockout = (boolean)UI::QueryWidget( `cb_ppolicy_uselockout, `Value );
            string pp_default = (string)UI::QueryWidget( `te_ppolicy_defaultpolicy, `Value );
            map<string,any> ppolicy = $[];
            if (hashcleartext )
            {
                ppolicy = add( ppolicy, "hashClearText", true);
            }
            else
            {
                ppolicy = add( ppolicy, "hashClearText", false);
            }
            if (uselockout)
            {
                ppolicy = add( ppolicy, "useLockout", true);
            }
            else
            {
                ppolicy = add( ppolicy, "useLockout", false);
            }
            if (pp_default != "" ) {
                if( (boolean)UI::QueryWidget( `cb_pp_append_basedn, `Value ) )
                {
                    map<string,any> db = baseDb;
                    if ( dbindex > 0 )
                    {
                        db = LdapServer::ReadDatabase(dbindex);
                    }
                    string suffix =  db["suffix"]:"";
                    pp_default = pp_default+","+suffix;
                }
                ppolicy = add( ppolicy, "defaultPolicy", pp_default);
            }
            else
            {
                ppolicy = add( ppolicy, "defaultPolicy", "");
            }
            y2milestone("Policy: %1", ppolicy);
            return ppolicy;
        } else {
            return $[];
        }
    }

    global boolean DbPpolicyInput( symbol handler_cmd )
    {
        if ( handler_cmd == `cb_ppolicy_overlay ) {
            if ( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ) {
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , true );
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , true );
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , true );
                UI::ChangeWidget( `cb_pp_append_basedn, `Enabled, true );
            } else {
                UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
                UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
                UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
                UI::ChangeWidget( `cb_pp_append_basedn, `Enabled, false );
            }
        }
        return true;
    }

    global term GetPpolicyWidget()
    {
        return editPolicy;
    }

    global list<string> SelectAttributes( list<string> selected )
    {
        map <string, map<string,boolean> > attrTypes =
                (map<string, map <string,boolean> >) SCR::Read( .ldapserver.schema.attributeTypes );
        list<string> attrs = (list<string>) maplist ( string k, any v, attrTypes, { return k; });
        attrs = lsort(attrs);
        term selectAttrWidget =
            `Top(
                `VBox(
                    `HSpacing(60),
                    `HBox(
                        `VSpacing(15),
                        `SelectionBox( `id( `sb_attr ), _("Available Attribute Types") , attrs ),
                        `VBox(
                            `PushButton( `id( `pb_add), "->" ),
                            `PushButton( `id( `pb_del), "<-" )
                        ),
                        `SelectionBox( `id( `sb_attr_sel ), _("Selected Attribute Types") , selected )
                    ),
                    `PushButton (`id (`ok), Label::OKButton())
                )
            );
        UI::OpenDialog( `opt( `decorated ), selectAttrWidget );
        symbol ret = `next;
        while(true) {
            ret = (symbol)UI::UserInput();
            y2milestone("Input event: %1", ret);
            if ( ret == `ok )
            {
                break;
            }
            else if ( ret == `pb_add )
            {
                string toadd = (string) UI::QueryWidget(`sb_attr, `CurrentItem );
                if ( toadd != nil )
                {
                    selected = add(selected, toadd);
                    selected = lsort(selected);
                    attrs = filter( string attr, attrs, { return attr != toadd; });
                    UI::ChangeWidget( `sb_attr_sel, `Items, selected );
                    UI::ChangeWidget( `sb_attr, `Items, attrs );
                }
            }
            else if ( ret == `pb_del )
            {
                string todel = (string) UI::QueryWidget(`sb_attr_sel, `CurrentItem );
                if ( todel != nil )
                {
                    attrs = add(attrs, todel);
                    attrs = lsort(attrs);
                    selected = filter( string attr, selected, { return attr != todel; });
                    UI::ChangeWidget( `sb_attr_sel, `Items, selected );
                    UI::ChangeWidget( `sb_attr, `Items, attrs );
                }
            }

        }
        UI::CloseDialog();
        return selected;
    }

    map<symbol, list<string> > whatId2String = $[
        `dn_all     : [ _("All Entries"), "*" ],
        `dn_subtree : [ _("All Entries in the subtree"), "subtree" ],
        `dn_base    : [ _("The Entry with the DN"), "base" ]
    ];

    map<symbol, list<string> > whoId2String = $[
        `who_all        : [ _("Everybody"), "*" ],
        `who_users      : [ _("Authenticated Clients") , "users" ],
        `who_anon       : [ _("Anonymous Clients"), "anonymous" ],
        `who_self       : [ _("The accessed Entry (self)"), "self" ],
        `who_dn         : [ _("The user with the DN"), "dn.base" ],
        `who_dn_subtree : [ _("All entries in the subtree") , "dn.subtree" ],
        `who_group      : [ _("All members of the group"), "group" ]
    ];
    map<string, symbol> whoString2Id = $[
        "*"             : `who_all,
        "users"         : `who_users,
        "anonymous"     : `who_anon,
        "self"          : `who_self,
        "dn.base"       : `who_dn,
        "dn.subtree"    : `who_dn_subtree,
        "group"         : `who_group
    ];

    map<symbol, list<string> > accessId2String = $[
        `access_none     : [ _("No Access"), "none"],
        `access_disclose : [ _("No Access (but disclose information on error)"), "disclose" ],
        `access_auth     : [ _("Authenticate"), "auth" ],
        `access_compare  : [ _("Compare"),  "compare" ],
        `access_read     : [ _("Read"), "read" ],
        `access_write    : [ _("Write"), "write" ],
        `access_manage   : [ _("Manage (full access)"), "manage" ]
    ];

    map<string, symbol> accessString2Id = $[
        "none"      : `access_none,
        "disclose"  : `access_disclose,
        "auth"      : `access_auth,
        "compare"   : `access_compare,
        "read"      : `access_read,
        "write"     : `access_write,
        "manage"    : `access_manage
    ];

    global map AddAclAccess(string suffix, map access)
    {
        list itemlist = [];
        foreach( symbol i, [ `who_all, `who_users, `who_anon, `who_self, `who_dn, `who_dn_subtree, `who_group ],
            {
                itemlist = add(itemlist, `item( `id( i ), whoId2String[i,0]:"" ) );
            }
        );

        list access_itemlist = [];
        foreach( symbol i, [`access_none, `access_disclose, `access_auth, `access_compare, `access_read, `access_write, `access_manage ] ,
            {
                access_itemlist = add(access_itemlist, `item( `id( i ), accessId2String[i,0]:"" ) );
            }
        );

        term widget =
            `VBox(
                `VSpacing(1),
                `HSquash(
                    `VSquash(
                        `VBox(
                            `Left(
                                `ComboBox( `id(`cb_who), `opt(`notify) , _("Who should this rule apply to"), itemlist)
                            ),
                            `Left(
                                `HBox(
                                    `InputField( `id( `te_who_dn ), `opt( `hstretch ), _("Entry DN") ),
                                    `Bottom(
                                        `PushButton( `id( `pb_who ), _("Select" ) )
                                    )
                                )
                            ),
                            `Left(
                                `ComboBox( `id(`cb_access), _("Define the Access Level"), access_itemlist)
                            ),
                            `HBox(
                                `PushButton( `id( `pb_ok), Label::OKButton() ),
                                `PushButton( `id( `cancel), Label::CancelButton() )
                            )
                        )
                    )
                )
            );
        UI::OpenDialog( `opt(`decorated), widget);

        UI::ChangeWidget( `id( `te_who_dn ), `Enabled, false );
        UI::ChangeWidget( `id( `pb_who ), `Enabled, false );

        if ( access != nil )
        {
            UI::ChangeWidget( `id( `cb_who), `Value, access["type"]:`nil );
            UI::ChangeWidget( `id( `cb_access), `Value, access["level"]:`nil );
            if ( access["type"]:`nil == `who_dn ||
                 access["type"]:`nil == `who_dn_subtree ||
                 access["type"]:`nil == `who_group )

            {
                UI::ChangeWidget( `id( `pb_who ), `Enabled, true );
                UI::ChangeWidget( `id( `te_who_dn ), `Enabled, true );
                UI::ChangeWidget( `id( `te_who_dn ), `Value, access["value"]:"" );
            }
        }
        symbol ret = `next;
        map res = $[];
        while(true) {
            ret = (symbol)UI::UserInput();
            y2milestone("Input event: %1", ret);
            if ( ret == `pb_ok )
            {
                symbol type = (symbol)UI::QueryWidget( `id( `cb_who ), `Value );
                res["type"] = type;

                if ( type == `who_dn || type == `who_dn_subtree || type == `who_group )
                {
                    res["value"] = UI::QueryWidget( `id( `te_who_dn), `Value );
                    if ( res["value"]:"" == "" )
                    {
                        Popup::Error(_("Please enter a DN into the Textfield") );
                        continue;
                    }
                    else
                    {
                        if ( ! LdapServer::ValidateDn( res["value"]:"" ) )
                        {
                            Popup::Error( "\"" + res["value"]:"" + "\"" + _("is not a valid LDAP DN") );
                            continue;
                        }
                    }
                }

                res["level"] = UI::QueryWidget( `id( `cb_access ), `Value );
                break;
            }
            else if ( ret == `cancel )
            {
                res = nil;
                break;
            }
            else if ( ret == `cb_who )
            {
                symbol cb_val = (symbol)UI::QueryWidget( `id(`cb_who), `Value );
                if ( cb_val == `who_all || cb_val == `who_users || cb_val == `who_anon || cb_val == `who_self )
                {
                    UI::ChangeWidget( `id( `te_who_dn ), `Enabled, false );
                    UI::ChangeWidget( `id( `pb_who ), `Enabled, false );
                }
                else if ( cb_val == `who_dn || cb_val == `who_dn_subtree || cb_val == `who_group )
                {
                    UI::ChangeWidget( `id( `te_who_dn ), `Enabled, true );
                    UI::ChangeWidget( `id( `pb_who ), `Enabled, true );
                    if ( cb_val == `who_dn )
                    {
                        UI::ChangeWidget( `id( `te_who_dn ), `Label, _("Entry DN") );
                    }
                    else if ( cb_val == `who_dn_subtree )
                    {
                        UI::ChangeWidget( `id( `te_who_dn ), `Label, _("Subtree DN") );
                    }
                    else if ( cb_val == `who_group )
                    {
                        UI::ChangeWidget( `id( `te_who_dn ), `Label, _("Group DN") );
                    }
                }
            }
            else if ( ret == `pb_who)
            {
                string dn = LdapPopup::InitAndBrowseTree(suffix, $["hostname":"localhost", "port":"389"] );
                UI::ChangeWidget( `id( `te_who_dn ), `Value, dn );
            }
        }
        UI::CloseDialog();
        return res;
    }

    global map AddAclTarget(string suffix, map acl)
    {
        list itemlist = [];
        foreach( symbol i, [ `dn_all, `dn_subtree, `dn_base ],
            {
                itemlist = add(itemlist, `item( `id( i ), whatId2String[i,0]:"" ) );
            }
        );
        term addAclWidget =
            `VBox(
                `Heading( _("Edit Access Control Rule") ),
                `HSquash(
                    `VSquash(
                        `VBox(
                            `Frame( _("Target Objects"),
                                `VBox(
                                    `HBox(
                                        `Left(
                                            `ComboBox( `id(`cb_what), `opt(`notify) , _("Who should this rule apply to"), itemlist)
                                        ),
                                        `InputField( `id( `te_dn ), `opt( `hstretch ), _("Entry DN") ),
                                        `Bottom(
                                            `PushButton( `id( `pb_dn ), _("Select" ) )
                                        )
                                    ),
                                    `VSpacing(0.5),
                                    `Left(
                                        `VBox(
                                            `Left(
                                                `CheckBox( `id( `cb_filter ), `opt(`notify), _("Matching the filter:") )
                                            ),
                                            `Left(
                                                `InputField( `id( `te_filter ), `opt(`hstretch), _("LDAP Filter") )
                                            )
                                        )
                                    ),
                                    `VSpacing(0.5),
                                    `Left(
                                        `CheckBox( `id( `cb_attrs ), `opt( `notify ), _("Apply this rule only to the listed Attribute") )
                                    ),
                                    `HBox(
                                        `Left(
                                            `InputField( `id( `te_attrs ), `opt(`hstretch), _("Attributes") )
                                        ),
                                        `Bottom(
                                            `PushButton( `id( `pb_attrs ), _("Edit" ) )
                                        )
                                    )
                                )
                            ),
                            `VSpacing(0.5),
                            `Frame( _("Access Level"),
                                `VBox(
                                    `HBox(
                                        `MinSize( 60, 7,
                                            `Table( `id( `tab_access ),`opt(`keepSorting), `header(_("Who"), _("DN"),_("Access Level") ) )
                                        ),
                                        `VBox(
                                            `PushButton( `id (`pb_up ), _("Up") ),
                                            `PushButton( `id (`pb_down ), _("Down") )
                                        )
                                    ),
                                    `HBox(
                                        `PushButton( `id (`pb_add ), _("Add") ),
                                        `PushButton( `id (`pb_del ), _("Delete") ),
                                        `PushButton( `id (`pb_edit ), _("Edit") )
                                    )
                                )
                            ),
                            `VSpacing(1),
                            `HBox(
                                `PushButton( `id( `pb_ok), Label::OKButton() ),
                                `PushButton( `id( `cancel), Label::CancelButton() )
                            )
                        )
                    )
                )
            );

        UI::OpenDialog(`opt( `decorated ), addAclWidget );

        if ( acl != nil )
        {
            UI::ChangeWidget( `id( `cb_what ), `Value, acl["target","what"]:`dn_all );
            if ( acl["target","what"]:`nil == `dn_base )
            {
                UI::ChangeWidget( `id (`te_dn ), `Enabled, true );
                UI::ChangeWidget( `id (`pb_dn ), `Enabled, true );
                UI::ChangeWidget( `id (`te_dn ), `Value, acl["target","dn"]:"" );
            }
            else if ( acl["target","what"]:`nil == `dn_subtree )
            {
                UI::ChangeWidget( `id (`te_dn ), `Enabled, true );
                UI::ChangeWidget( `id (`te_dn ), `Value, acl["target","dn"]:"" );
                UI::ChangeWidget( `id (`te_dn ), `Label, _("Subtree DN") );
            }
            else if ( acl["target","what"]:`nil == `dn_all )
            {
                UI::ChangeWidget( `id (`te_dn ), `Enabled, false );
                UI::ChangeWidget( `id (`pb_dn ), `Enabled, false );
            }
            if ( acl["target","filter"]:"" != "" )
            {
                UI::ChangeWidget( `id( `cb_filter ), `Value, true );
                UI::ChangeWidget( `id( `te_filter ), `Enabled, true );
                UI::ChangeWidget( `id( `te_filter ), `Value, acl["target","filter"]:"" );
            }
            else
            {
                UI::ChangeWidget( `id( `cb_filter ), `Value, false );
                UI::ChangeWidget( `id( `te_filter ), `Enabled, false );
            }
            if ( acl["target","attrs"]:"" != "" )
            {
                UI::ChangeWidget( `id( `cb_attrs ), `Value, true );
                UI::ChangeWidget( `id( `te_attrs ), `Enabled, true );
                UI::ChangeWidget( `id( `pb_attrs ), `Enabled, true );
                UI::ChangeWidget( `id( `te_attrs ), `Value, acl["target","attrs"]:"" );
            }
            else
            {
                UI::ChangeWidget( `id( `cb_attrs ), `Value, false );
                UI::ChangeWidget( `id( `te_attrs ), `Enabled, false );
            }
        }
        else
        {
            UI::ChangeWidget( `id( `te_dn ), `Enabled, false );
            UI::ChangeWidget( `id( `pb_dn ), `Enabled, false );
            UI::ChangeWidget( `id( `cb_what ), `Value, `dn_all );
            UI::ChangeWidget( `id( `cb_filter ), `Value, false );
            UI::ChangeWidget( `id( `te_filter ), `Enabled, false );
            UI::ChangeWidget( `id( `cb_attrs ), `Value, false );
            UI::ChangeWidget( `id( `te_attrs ), `Enabled, false );
            UI::ChangeWidget( `id( `pb_attrs ), `Enabled, false );
        }

        symbol ret = `next;
        map result = $[];
        list<map> accesslist = acl["access"]:[];
        boolean updateTable = true;
        integer selected = 0;
        while(true) {
            if ( updateTable )
            {
                integer pos = -1;
                list itemlist = maplist (map v, accesslist,
                    {
                        pos=pos+1;
                        return `item( `id(pos), whoId2String[v["type"]:`none,0]:"", v["value"]:"", accessId2String[v["level"]:`none,0]:"");
                    }
                );
                UI::ChangeWidget( `tab_access, `Items, itemlist) ;
                UI::ChangeWidget(`id(`tab_access), `CurrentItem, selected );
                updateTable = false;
            }

            ret = (symbol)UI::UserInput();
            y2milestone("Input event: %1", ret);
            selected = (integer)UI::QueryWidget( `id( `tab_access ), `CurrentItem );
            if ( ret == `pb_ok )
            {
                map what = $[];
                what["what"] = UI::QueryWidget( `id( `cb_what ), `Value );
                what["dn"] = UI::QueryWidget( `id( `te_dn ), `Value );
                if ( (what["what"]:`nil == `dn_base || what["what"]:`nil == `dn_subtree ) &&
                     what["dn"]:"" == "" )
                {
                    Popup::Error(_("Please enter a DN into the textfield") );
                    continue;
                }
                else
                {
                    if ( ! LdapServer::ValidateDn( what["dn"]:"" ) )
                    {
                        Popup::Error( "\"" + what["dn"]:"" + "\"" + _("is not a valid LDAP DN") );
                        continue;
                    }
                }
                if ( (boolean)UI::QueryWidget( `id( `cb_attrs ), `Value ) )
                {
                    if ( "" != (string)UI::QueryWidget( `id( `te_attrs ), `Value ) )
                    {
                        // FIXME: Validate attribute types
                        what["attrs"] = UI::QueryWidget( `id( `te_attrs ), `Value );
                    }
                    else
                    {
                        Popup::Error(_("Please enter a List of valid Attributes into the \"Attributes\" textfield") );
                        continue;
                    }
                }

                if ( (boolean)UI::QueryWidget( `id( `cb_filter ), `Value ) )
                {
                    if ( "" != UI::QueryWidget( `id( `te_filter ), `Value ) )
                    {
                        what["filter"] = UI::QueryWidget( `id( `te_filter ), `Value );
                    }
                    else
                    {
                        Popup::Error(_("Please enter valid LDAP Filter into textfield") );
                        continue;
                    }
                }

                result["target"] = what;
                result["access"] = accesslist;
                y2milestone("New ACL: %1", result);
                break;
            }
            else if ( ret == `cancel )
            {
                result = nil;
                break;
            }
            else if ( ret == `cb_what )
            {
                symbol cb_val = (symbol)UI::QueryWidget( `id(`cb_what), `Value );
                if ( cb_val == `dn_all )
                {
                    UI::ChangeWidget( `id( `te_dn ), `Enabled, false );
                    UI::ChangeWidget( `id( `pb_dn ), `Enabled, false );
                }
                else if ( cb_val == `dn_base || cb_val == `dn_subtree )
                {
                    UI::ChangeWidget( `id( `te_dn ), `Enabled, true );
                    UI::ChangeWidget( `id( `pb_dn ), `Enabled, true );
                    if ( cb_val == `dn_subtree )
                    {
                        UI::ChangeWidget( `id( `te_dn ), `Label, _("Subtree DN") );
                    }
                    else
                    {
                        UI::ChangeWidget( `id( `te_dn ), `Label, _("Entry DN") );
                    }
                }
            }
            else if ( ret == `pb_dn )
            {
                string dn = LdapPopup::InitAndBrowseTree(suffix, $["hostname":"localhost", "port":"389"] );
                UI::ChangeWidget( `id( `te_dn ), `Value, dn );
            }
            else if ( ret == `cb_filter )
            {
                if ( (boolean) UI::QueryWidget( `id(`cb_filter), `Value ) )
                {
                    UI::ChangeWidget( `id( `te_filter ), `Enabled, true );
                }
                else
                {
                    UI::ChangeWidget( `id( `te_filter ), `Enabled, false );
                }
            }
            else if ( ret == `cb_attrs )
            {
                if ( (boolean) UI::QueryWidget( `id(`cb_attrs ), `Value ) )
                {
                    UI::ChangeWidget( `id( `te_attrs ), `Enabled, true );
                    UI::ChangeWidget( `id( `pb_attrs ), `Enabled, true );
                }
                else
                {
                    UI::ChangeWidget( `id( `te_attrs ), `Enabled, false );
                    UI::ChangeWidget( `id( `pb_attrs ), `Enabled, false );
                }
            }
            else if (ret == `pb_attrs )
            {
                string attr_string = (string)UI::QueryWidget( `id( `te_attrs ), `Value );
                list<string> attrs = splitstring( attr_string, "," );
                attrs = SelectAttributes(attrs);
                attr_string = mergestring(attrs, "," );
                UI::ChangeWidget( `id( `te_attrs ), `Value, attr_string );
            }
            else if ( ret == `pb_add )
            {
                map access = AddAclAccess(suffix, nil );
                if ( access != nil )
                {
                    accesslist = add(accesslist, access);
                    updateTable = true;
                }
            }
            else if ( ret == `pb_edit )
            {
                if ( selected != nil )
                {
                    map access = accesslist[selected]:nil;
                    access = AddAclAccess(suffix, access);
                    if ( access != nil )
                    {
                        accesslist[selected] = access;
                        updateTable = true;
                    }
                }
            }
            else if ( ret == `pb_del )
            {
                if ( selected != nil )
                {
                    accesslist = remove(accesslist, selected);
                    updateTable = true;
                }
            }
            else if ( ret == `pb_up )
            {
                if ( selected != nil &&  selected > 0 )
                {
                    integer newIndex = selected - 1;
                    map oldItem = accesslist[newIndex]:nil;
                    accesslist[newIndex] = accesslist[selected]:nil;
                    accesslist[selected] = oldItem;
                    updateTable = true;
                    selected = newIndex;
                }
            }
            else if ( ret == `pb_down )
            {
                if ( selected != nil &&  selected < (size(accesslist)-1) )
                {
                    integer newIndex = selected + 1;
                    map oldItem = accesslist[newIndex]:nil;
                    accesslist[newIndex] = accesslist[selected]:nil;
                    accesslist[selected] = oldItem;
                    updateTable = true;
                    selected = newIndex;
                }
            }
        }
        UI::CloseDialog();
        return result;
    }

    global term GetAclWidget()
    {
        term aclList =
            `VBox(
                `VSpacing(1),
                `VBox(
                    `HBox(
                        `MinSize( 60, 7,
                            `Table( `id( `tab_acl ),`opt(`keepSorting), `header(_("Target"), _("DN"), _("Filter"), _("Attributes") ) )
                        ),
                        `VBox(
                            `PushButton( `id (`pb_up ), _("Up") ),
                            `PushButton( `id (`pb_down ), _("Down") )
                        )
                    ),
                    `HBox(
                        `PushButton( `id (`pb_add ), _("Add") ),
                        `PushButton( `id (`pb_del ), _("Delete") ),
                        `PushButton( `id (`pb_edit ), _("Edit") )
                    )
                )
            );
        return aclList;
    }


    global boolean DbAclRead( integer dbindex, list<map> readAcls )
    {
        acllist = [];
        if ( readAcls == nil )
        {
            y2milestone("Unparseable ACLs");
            acllist = nil;
            UI::ChangeWidget( `id(`tab_acl), `Enabled, false) ;
            UI::ChangeWidget( `id(`pb_add), `Enabled, false) ;
            UI::ChangeWidget( `id(`pb_del), `Enabled, false) ;
            UI::ChangeWidget( `id(`pb_edit), `Enabled, false) ;
            Popup::Error(_("The selected Database contains Access Control Rules that are currently
not supported by this YaST Module. The Access Control Dialog will be disabled." ) );
        }
        else
        {
            foreach( map acl, readAcls,
                {
                    map targetMap = acl["target"]:$[];
                    map resMap =$[];
                    resMap["target"] = $[];
                    resMap["access"] = [];
                    if ( size(targetMap) == 0 )
                    {
                        resMap["target", "what"] = `dn_all;
                    }
                    else
                    {
                        map dnMap = targetMap["dn"]:$[];
                        if (size(dnMap) > 0)
                        {
                           if (dnMap["style"]:"" == "subtree" )
                           {
                               resMap["target", "what"] = `dn_subtree;
                           }
                           else if (dnMap["style"]:"" == "base" )
                           {
                               resMap["target", "what"] = `dn_base;
                           }
                           resMap["target", "dn"] = dnMap["value"]:"";
                        }
                        else
                        {
                            resMap["target", "what"] = `dn_all;
                        }
                        resMap["target", "filter"] = targetMap["filter"]:"";
                        resMap["target", "attrs"] = targetMap["attrs"]:"";
                    }
                    list<map> accessList = [];
                    foreach( map access, acl["access"]:[],
                        {
                            map<string,any> accessMap = $[];
                            accessMap["level"] = accessString2Id[access["level"]:""]:`access_none;
                            accessMap["type"] = whoString2Id[access["type"]:""]:`nil;
                            accessMap["value"] = access["value"]:"";
                            accessList = add( accessList, accessMap );
                        }
                    );
                    resMap["access"] = accessList;
                    acllist = add( acllist, resMap );
                }
            );
            integer pos = -1;
            list itemlist = maplist (map v, acllist,
                {
                    pos=pos+1;
                    return `item( `id(pos),
                                  whatId2String[v["target","what"]:`none,0]:"",
                                  v["target","dn"]:"",
                                  v["target","filter"]:"",
                                  v["target","attrs"]:"All Attributes"
                                );
                }
            );
            UI::ChangeWidget( `tab_acl, `Items, itemlist) ;
        }
        return true;
    }

    global list<map> DbAclWrite( integer dbindex )
    {
        if ( acllist == nil )
        {
            return nil;
        }

        list<map> outlist = [];
        foreach( map acl, acllist,
            {
                y2milestone( "------------------------------" );
                y2milestone( "ACL Target: %1", acl["target","what"]:`nil );
                map targetmap = $[];
                if ( acl["target","what"]:`dn_all != `dn_all )
                {
                    map dn = $[
                        "style"    : whatId2String[ acl["target","what"]:`dn_base,1 ]:"",
                        "value" : acl["target","dn"]:""
                    ];
                    targetmap["dn"] = dn;
                }
                if ( acl["target","filter"]:"" != "" )
                {
                    targetmap["filter"] = acl["target","filter"]:"";
                }
                if ( acl["target","attrs"]:"" != "" )
                {
                    targetmap["attrs"] = acl["target","attrs"]:"";
                }
                y2milestone( "ACL Target: %1", targetmap );
                list<map> outlist_access = [];
                foreach( map access, acl["access"]:[],
                    {
                        access["level"] = accessId2String[access["level"]:`nil,1]:"none";
                        access["type"] = whoId2String[access["type"]:`nil,1]:"";
                        y2milestone( "ACL Access: %1", access );
                        outlist_access = add(outlist_access, access );
                    }
                );
                outlist = add(outlist, $[ "target" : targetmap, "access" : outlist_access ] );
            }
        );
        return outlist;
    }

    global boolean DbAclInput( symbol handler_cmd, integer dbindex )
    {
        map db = $[];
        if ( dbindex > 0 )
        {
            db = LdapServer::ReadDatabase(dbindex);
        }
        string suffix =  db["suffix"]:"";
        boolean updateTable = false;

        integer selected = (integer)UI::QueryWidget( `id( `tab_acl ), `CurrentItem );

        if ( handler_cmd == `pb_add )
        {
            map aclmap = AddAclTarget(suffix, nil);
            if (aclmap != nil )
            {
                acllist = add(acllist, aclmap);
                updateTable = true;
            }
        }
        else if ( handler_cmd == `pb_del )
        {
            if ( selected != nil )
            {
                acllist = remove(acllist, selected);
                updateTable = true;
                selected = 0;
            }
        }
        else if ( handler_cmd == `pb_edit )
        {
            if ( selected != nil )
            {
                map aclmap = acllist[selected]:nil;
                aclmap = AddAclTarget(suffix, aclmap );
                if (aclmap != nil )
                {
                    acllist[selected] = aclmap;
                    updateTable = true;
                }
            }
        }
        else if ( handler_cmd == `pb_up )
        {
            if ( selected != nil &&  selected > 0 )
            {
                integer newIndex = selected - 1;
                map oldItem = acllist[newIndex]:nil;
                acllist[newIndex] = acllist[selected]:nil;
                acllist[selected] = oldItem;
                updateTable = true;
                selected = newIndex;
            }
        }
        else if ( handler_cmd == `pb_down )
        {
            if ( selected != nil &&  selected < (size(acllist)-1) )
            {
                integer newIndex = selected + 1;
                map oldItem = acllist[newIndex]:nil;
                acllist[newIndex] = acllist[selected]:nil;
                acllist[selected] = oldItem;
                updateTable = true;
                selected = newIndex;
            }
        }

        if ( updateTable )
        {
            integer pos = -1;
            list itemlist = maplist (map v, acllist,
                {
                    pos=pos+1;
                    return `item( `id(pos),
                                  whatId2String[v["target","what"]:`none,0]:"",
                                  v["target","dn"]:"",
                                  v["target","filter"]:"",
                                  v["target","attrs"]:"All Attributes"
                                );
                }
            );
            UI::ChangeWidget( `tab_acl, `Items, itemlist) ;
            UI::ChangeWidget(`id(`tab_acl), `CurrentItem, selected );
        }
        return true;
    }

    define symbol DbPpolicy()
    {
        string caption = _("Password Policy settings");
        term contents = editPolicy;
        Wizard::SetContentsButtons(caption, contents, "",
                Label::BackButton(), Label::FinishButton());
        symbol ret = `next;
        DbPpolicyRead(-1);
        while(true) {
            ret = (symbol)UI::UserInput();
            if (ret == `abort || ret == `cancel )
            {
                if(Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            else if (ret == `next )
            {
                ppolicyNew = DbPpolicyWrite(-1);
                break;
            }
            else if (ret == `back )
            {
                break;
            }
            else
            {
                DbPpolicyInput(ret);
            }
        }
        return ret;
    }

    global define any AddDbWizard()
    {
        map aliases = $[
            "basics" : ``( AddDbBasic(false) ),
            "syncprov" : ``( DbSyncProv() ),
            "ppolicy" : ``( DbPpolicy() )
        ];

        map sequence = $[
            "ws_start" : "basics",
            "basics" : $[
                `next  : "ppolicy",
                `abort : `abort
            ],
            "syncprov" : $[
                `next : "ppolicy",
                `abort : `abort
            ],
            "ppolicy" : $[
                `next : `next,
                `abort : `abort
            ]
        ];

        baseDb = $[ "rootdn" : "cn=Administrator", "directory" : "/var/lib/ldap" ];

        Wizard::CreateDialog();

        any ret = Sequencer::Run(aliases, sequence);

        UI::CloseDialog();
        return ret;
    }

    global define map<string,any> GetDatabase()
    {
        return baseDb;
    }
    global define map<string,any> GetPpolicy()
    {
        return ppolicyNew;
    }
    global define boolean GetCreateDir()
    {
        return createDbDir;
    }
    global define string GetLdapConfBase()
    {
        return ldapconf_basedn;
    }
}
