/**
 * File:	include/ldap-server/complex.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Dialogs definitions
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 */

{

textdomain "ldap-server";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "LdapServer";
import "Package";
import "Service";

include "ldap-server/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return LdapServer::Modified();
}

boolean ReallyAbort() {
    return !LdapServer::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

boolean DisplayError( map<string,string> error )
{
    if ( error["msg"]:nil != nil )
    {
        if ( error["details"]:nil != nil )
        {
            Popup::ErrorDetails(error["msg"]:"", error["details"]:"");
        }
        else
        {
            Popup::Error(error["msg"]:"");
        }
    }
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");

    /* ensure openldap2 package is installed */
    if( !Package::Install( "openldap2" ) )
    {
	if( !Package::Available( "openldap2" ) ) {
	    // translators: error popup before aborting the module
	    Popup::Error( sformat( _("The package '%1' is not available.
YaST2 cannot continue the configuration
without installing the package."), "openldap2" ) );
	}
	else
	{
	    // translators: error popup before aborting the module
	    Popup::Error (_("YaST2 cannot continue the configuration
without installing the required packages."));
	}
	return `abort;
    }

/* Code for replacing  the cn=config password temporarily
    string oldRootPw = "";
    string newRootPw = "";
    string newRootPwCrypt = "";
    string entry = (string) SCR::Read(.target.string, "/etc/openldap/slapd.d/cn=config/olcDatabase={0}config.ldif");
    list<string> attrlist = splitstring( entry, "\n");
    list<string> newAttrlist = [];

    // Generate a temporary password
    map pwMap = (map) SCR::Execute( .target.bash_output, "/usr/sbin/slappasswd -g");
    if ( (integer)(pwMap["exit"]:0) == 0 )
    {
        newRootPw = (string) pwMap["stdout"]:"";
        string cmd = sformat("/usr/sbin/slappasswd -h {SSHA} -n -s %1", newRootPw);
        map cryptPwMap = (map) SCR::Execute( .target.bash_output, cmd);
        if  ( (integer)(cryptPwMap["exit"]:0) == 0 )
        {
            newRootPwCrypt = (string) cryptPwMap["stdout"]:"";
            y2milestone("crypted PW: %1", newRootPwCrypt );
        }
    }

    // find and replace (or append) the password
    boolean replaced = false;
    foreach( string i, attrlist,
        {
            y2milestone("attr <%1> len %2", i, size(i));
            if ( regexpmatch( tolower(i), "^olcrootpw" ) ) {
                // attr might be the base64 encoded password hash (": <hash>")
                list<string> attr = regexptokenize( i, "^([^:]+):(.+)");
                oldRootPw = attr[1]:"";
                newAttrlist[size(newAttrlist)] = sformat("olcRootPW: %1", newRootPwCrypt);
                replaced = true;
            } else {
                if ( size(i) > 0 )
                {
                    newAttrlist[size(newAttrlist)] = i;
                }
            }
        }
    );
    if (! replaced )
    {
        newAttrlist[size(newAttrlist)] = sformat("olcRootPW: %1", newRootPwCrypt);
    }
    newAttrlist[size(newAttrlist)] = "";
    string newEntry = mergestring(newAttrlist, "\n");
    boolean result = SCR::Write(.target.string,
            "/etc/openldap/slapd.d/cn=config/olcDatabase={0}config.ldif", newEntry);

    y2milestone("Updated config.ldif %1", result);
    list<string> progress_items = [];
    if ( switchToBackConfig ) {
        if ( isRunning ) {
            progress_items[size(progress_items)] = _("Stopping the OpenLDAP Server.");
        }
        progress_items[size(progress_items)] = _("Switching configuration backend to \"ldap\".");
        progress_items[size(progress_items)] = _("Cleaning up configuration directory.");
    }
    if ( convert ) {
        progress_items[size(progress_items)] = _("Converting config file.");
    }
    Progress::New("Caption", "Progress Title", size(progress_items), progress_items, progress_items, "");
    foreach( string i, progress_items, {
            Progress::NextStage();
        }
    );
*/

    boolean ret = LdapServer::Read();
    if ( ! ret )
    {
        return `abort;
    }
    boolean hasBackconfig = LdapServer::IsUsingBackconfig();
    boolean configModified = LdapServer::SlapdConfChanged(); //original shipped slapd.conf?
    boolean switchToBackConfig = false;
    boolean convert = false;

    //y2milestone("OpenLDAP running: %1", isRunning);
    y2milestone("OpenLDAP using backConfig: %1", hasBackconfig);
    y2milestone("OpenLDAP modifed config: %1", configModified);
    string configFile = "/etc/openldap/slapd.conf";
    if ( !hasBackconfig && configModified )
    {
        switchToBackConfig = Popup::ContinueCancelHeadline( _("Convert to \"Back-Config\"?"),
_("Your system is currently configured to use the 
configuration file /etc/openldap/slapd.conf. This YaST
module will switch OpenLDAP to use the dynamic configuration
database of OpenLDAP (back-config)."));
        if (switchToBackConfig)
        {
            convert = Popup::YesNoHeadline( _("Convert existing configuration?"),
_("Do you want to convert your existing configuration
files, to the dynamic configuration backend?
Note: This will remove any preexisting configuration data
from \"/etc/openldap/slapd.d/\".
If you click \"No\" here, an empty configuration will
be created"));
            if (convert)
            {
                // Convert the existing configuration and after that
                // re-read it.
                if (! LdapServer::MigrateSlapdConf())
                {
                    y2milestone("LdapServer::MigrateSlapdConf failed");
                    DisplayError( LdapServer::GetError() );
                    return `abort;
                }
                LdapServer::Read();
            }
        }
        else
        {
            return `abort;
        }
    }
    else if (! configModified )
    {
        // Start new config wizward
        LdapServer::InitDbDefaults();
        return `initial;
    }

    return `next;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // LdapServer::AbortFunction = PollAbort;
    boolean ret = LdapServer::Write();
    if (! ret ) {
        return `abort;
    }
//    ret = LdapServer::WritePPolicyObjects();
    return ret ? `next : `abort;
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* LdapServer summary dialog caption */
    string caption = _("LDAP Server Configuration Summary");

    string summary = LdapServer::Summary();

    /* Frame label */
    term contents =
        `VBox(
            `RichText( summary ),
            `Right( 
                `PushButton( `id(`pb_advanced), _("Advanced Configuration") )
            )
        );

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel )
        {
	    if(ReallyAbort())
            {
                break;
            }
	    else
            {
                continue;
            }
	}
        else if ( ret == `pb_advanced )
        {
            Popup::Error("Not there yet");
            LdapServer::ReadFromDefaults();
            ret = `advanced;
            break;
        }
        else if ( ret == `next )
        {
            LdapServer::ReadFromDefaults();
            ret = `next;
            break;
        }
        else if ( ret == `back )
        {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
