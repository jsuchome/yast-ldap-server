
{
    textdomain "ldap-server";

    map<string, any> firewall_settings = $[
            "services": [ "ldap" , "ldaps" ],
            "display_details": true,
    ];

    /* list of valid encoding methods for password inputs, used by add database and edit database
     * dialogs
     */
    list enc_types = [
        `item( `id( "CRYPT" ), "CRYPT" ),
        `item( `id( "SMD5" ), "SMD5" ),
        `item( `id( "SHA" ), "SHA" ),
        `item( `id( "SSHA" ), "SSHA", true ),
        `item( `id( "PLAIN" ), "PLAIN" )
    ];

    map<string, any> fw_widget = CWMFirewallInterfaces::CreateOpenFirewallWidget (firewall_settings);
    term dlg_service_new = `Top(
        `VBox(
            `VBox(
                `Frame( _("&Start LDAP Server"),
                    `VBox(
                        `RadioButtonGroup(
                            `VBox(
                                `Left( `RadioButton( `id( `rb_no ), `opt( `notify ), Label::NoButton(), !LdapServer::ReadServiceEnabled() ) ),
                                `Left( `RadioButton( `id( `rb_yes ), `opt( `notify ), Label::YesButton(), LdapServer::ReadServiceEnabled() ) )
                            )
                        ),
//                        `Left( `CheckBox( `id( `cb_register_slp ), _("Register at an &SLP Daemon"), LdapServer::ReadSLPEnabled() )),
                        `HStretch()
                    )
                )
            ),
            `VSpacing(),
            `VBox(
                `Frame( _("Protocol Listeners"),
                    `VBox(
                        `Left(
                            `HBox(
                                `HWeight(1, `CheckBox( `id( `cb_interface_ldap), _("LDAP"), false )),
                                `HWeight(1, `PushButton( `id( `pb_interface_ldap), "Interfaces ...")),
                                `HWeight(1, `HStretch())
                            )
                        ),
                        `Left(
                            `HBox(
                                `HWeight(1, `CheckBox( `id( `cb_interface_ldaps), _("LDAP over SSL (ldaps)"), false )),
                                `HWeight(1, `PushButton( `id( `pb_interface_ldaps), "Interfaces ...")),
                                `HWeight(1, `HStretch())
                            )
                        ),
                        `Left(
                            `HBox(
                                `HWeight(1, `CheckBox( `id( `cb_interface_ldapi), _("LDAP over IPC (ldapi)"), false ) ),
                                `HWeight(1, `PushButton( `id( `pb_interface_ldapi), "Interfaces ...") ),
                                `HWeight(1, `HStretch())
                            )
                        )
                    )
                )
            ),
            `VSpacing(),
            `VBox(
                `Frame( _("Firewall Settings"),
                    `VBox(
                        fw_widget["custom_widget"]:`Empty(),
                        `HStretch()
                    )
                )
            )
        )
    );

    term schemaWidget =
        `VBox(
            `SelectionBox( `id( `sb_schemalist ), _("Included &Schema Files"), [] ),
            `Left(
                `HBox(
                    `PushButton( `id( `pb_add ), Label::AddButton() ),
                    `HSpacing( 0.5 ),
                    `PushButton( `id( `pb_delete ), Label::DeleteButton() )
                )
            )
        );

    term loglevelWidget =
        `MultiSelectionBox(
            `id( `msb_loglevel ), _("Select &Log Level Flags:"), [
                `item( `id( "trace" ), _("Trace Function Calls") ),
                `item( `id( "packets" ), _("Debug Packet Handling") ),
                `item( `id( "args" ), _("Heavy Trace Debugging (function args)") ),
                `item( `id( "conns" ), _("Connection Management") ),
                `item( `id( "BER" ), _("Print Packets Sent and Received") ),
                `item( `id( "filter" ), _("Search Filter Processing") ),
                `item( `id( "config" ), _("Configuration File Processing") ),
                `item( `id( "ACL" ), _("Access Control List Processing") ),
                `item( `id( "stats" ), _("Log Connections, Operations, and Result") ),
                `item( `id( "stats2" ), _("Log Entries Sent") ),
                `item( `id( "shell" ), _("Print Communication with Shell Back-Ends") ),
                `item( `id( "parse" ), _("Entry Parsing") ),
                `item( `id( "sync" ), _("LDAPSync Replication") ),
                `item( `id( "none" ), _("None") ),
                `item( `id( "cache" ), _("Proxy Cache") )
            ]
        );

    term allowWidget =
        `VBox (
            `MultiSelectionBox(
                `id( `msb_allow ), _("Select &Allow Flags:"), [
                    `item( `id( "bind_v2" ), _("LDAPv2 Bind Requests") ),
                    `item( `id( "bind_anon_cred" ), _("Anonymous Bind when Credentials Not Empty") ),
                    `item( `id( "bind_anon_dn" ), _("Unauthenticated Bind when DN Not Empty") ),
                    `item( `id( "update_anon" ), _("Unauthenticated Update Options to Process") )
                ]
            ),
            `MultiSelectionBox(
                `id( `msb_disallow ), _("Select &Disallow Flags:"), [
                    `item( `id( "bind_anon" ), _("Disable acceptance of anonymous Bind Requests (does not prohibit anonymous directory access)") ),
                    `item( `id( "bind_simple" ), _("Disable Simple Bind authentication") ),
                    `item( `id( "tls_2_anon" ), _("Disable forcing session to anonymous status upon StartTLS operation receipt") ),
                    `item( `id( "tls_authc" ), _("Disallow the StartTLS operation if authenticated") )
                ]
            )
        );

    term tlsWidget =
        `Top(
            `VBox(
                `Heading( _("TLS Settings") ),
                `VBox(
                    `Frame(
                        _("Basic Settings"),
                        `VBox(
                            `Left(
                                `CheckBox( `id( `cb_tls_enabled ), `opt( `notify ) ,
                                        _("Enable TLS"), false )
                            ),
                            `Left(
                                `CheckBox( `id( `cb_ssl_listener_enabled ),
                                        _("Enable LDAP over SSL (ldaps) interface"), false )
                            ),
                            `Left(
                                `CheckBox( `id( `cb_use_common_cert ), `opt( `notify ),
                                        _("Use common Server Certificate"), false )
                            ),
                            `HStretch()
                        )
                    )
                ),
                `VSpacing( 0.5 ),
                `VBox(
                    `Frame( `id( `fr_import_cert ),
                        _("Import Certificate"),
                        `VBox(
                            `VSquash(
                                `HBox(
                                    `InputField( `id( `te_ca_file ), `opt( `hstretch ),
                                            _("C&A Certificate File (PEM Format)") ),
                                    `HSpacing( 0.5 ),
                                    `Bottom(
                                        `PushButton( `id( `pb_ca_file ), _("Bro&wse...") )
                                    )
                                )
                            ),
                            `VSpacing( 0.5 ),
                            `VSquash(
                                `HBox(
                                    `InputField( `id( `te_cert_file ), `opt( `hstretch ),
                                            _("Certificate &File (PEM Format)") ),
                                    `HSpacing( 0.5 ),
                                    `Bottom(
                                        `PushButton( `id( `pb_cert_file ), _("&Browse...") )
                                    )
                                )
                            ),
                            `VSpacing( 0.5 ),
                            `VSquash(
                                `HBox(
                                    `InputField( `id( `te_key_file ), `opt( `hstretch ),
                                            _("Certificate &Key File (PEM Format - Unencrypted)") ),
                                    `HSpacing( 0.5 ),
                                    `Bottom(
                                        `PushButton( `id( `pb_key_file ), _("B&rowse...") )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );

    term addDbWidget =
        `HBox(
            `HSpacing(0.25),
            `VBox(
                `Heading( _("Add Database") ),
                `VSpacing( 1 ),
                `Frame( _("General Settings"),
                    `VBox(
                        `TextEntry( `id( `te_basedn ), `opt(`notify ), _("&Base DN") ),
                        `VSpacing( 0.5 ),
                        `VSquash(
                            `HBox(
                                `TextEntry( `id( `te_rootdn ), _("&Root DN") ),
                                `HSpacing( 0.5 ),
                                `VBox(
                                    `Bottom(
                                        `CheckBox( `id( `cb_append_basedn ), _("&Append Base DN"), true )
                                    ),
                                    `VSpacing( 0.3 )
                                )
                            )
                        ),
                        `VSpacing( 0.5 ),
                        `HBox(
                            `Password( `id( `te_rootpw ), _("LDAP &Password") ),
                            `HSpacing( 0.5 ),
                            `Password( `id( `te_valid_rootpw ), _("&Validate Password") ),
                            `HSpacing( 0.5 ),
                            `ComboBox( `id( `cb_cryptmethod ), _("&Encryption"), enc_types )
                        ),
                        `VSpacing( 0.5 ),
                        `VSquash(
                            `HBox(
                                `TextEntry( `id( `te_directory ),`opt(`notify ), _("&Database Directory") ),
                                `HSpacing( 0.5 ),
                                `Bottom(
                                    `PushButton( `id( `pb_directory ), _("&Browse...") )
                                )
                            )
                        )
                    )
                ),
                `VSpacing( 1 ),
                `Frame( _("Password Policy Settings"),
                    `VBox(
                        `VSpacing(0.25),
                        `HBox(
                            `CheckBox( `id( `cb_ppolicy_overlay ),
                                `opt(`notify ), _("Enable Password Policies"), false
                            ),
                            `HSpacing( `opt(`hstretch))
                        ),
                        `HBox(
                            `CheckBox( `id( `cb_ppolicy_hashcleartext ),
                                _("Hash Clear Text Passwords"), false
                            ),
                           `HSpacing( `opt(`hstretch))
                        ),
                        `HBox(
                            `CheckBox( `id( `cb_ppolicy_uselockout ),
                                _("Disclose \"Account Locked\" Status"), false
                            ),
                            `HSpacing( `opt(`hstretch))
                        ),
                        `HBox(
                            `TextEntry( `id( `te_ppolicy_defaultpolicy ),
                                _("Default Policy Object DN"), "cn=Default Password Policy" ),
                            `HSpacing( 0.5 ),
                            `VBox(
                                `Bottom(
                                    `CheckBox( `id( `cb_pp_append_basedn ),
                                            _("&Append Base DN"), true
                                    )
                                ),
                                `VSpacing( 0.3 )
                            )
                        ),
                        `VSpacing(0.25)
                    )
                ),
                `HBox(
                    `PushButton( `id( `ok ), Label::OKButton() ),
                    `PushButton( `id( `cancel ), Label::CancelButton() )
                )
            ),
            `HSpacing(0.25)
        );

    term generalDbWidget =
        `VBox(
            `InputField( `id( `te_basedn ), `opt( `disabled, `hstretch ),
                        _("&Base DN") ),
            `VSpacing( 0.5 ),
            `VSquash(
                `HBox(
                    `InputField( `id( `te_rootdn ), `opt( `hstretch ),
                        _("&Root DN") ),
                    `HSpacing( 0.5 ),
                    `VBox(
                        `Bottom(
                            `CheckBox( `id( `cb_append_basedn ), _("&Append Base DN") )
                        ),
                        `VSpacing( 0.3 )
                    )
                )
            ),
            `VSpacing( 0.5 ),
            `Left(
                `PushButton( `id( `pb_changepw ), _("Change Password") )
            ),
            `VSpacing( 0.5 ),
            `Left(
                `CheckBox( `id( `cb_dbreadonly ), _("Database is read-only"), false )
            ),
            `Left(
                `CheckBox( `id( `cb_dbmonitoring ), _("Enable Monitoring"), false )
            )
        );

    term editBdbDatabase =
        `Top(
            `VBox(
                `Heading( _("Edit BDB Database") ),
                `VSpacing( 1 ),
                generalDbWidget
            )
        );

    term editBdbIndexes =
        `VBox(
            `Heading( _("Edit Index Configuration") ),
            `Table(
                `id( `tab_idx ),
                `header( "Attrbute", "pres", "eq", "sub", "approx"),
                [ ]
            ),
            `HSquash(
                `HBox(
                    `PushButton( `id( `pb_idx_add ), _("Add") ),
                    `PushButton( `id( `pb_idx_edit ), _("Edit") ),
                    `PushButton( `id( `pb_idx_del ), _("Delete") )
                )
            )
        );
    term editPolicy =
        `Top(
            `VBox(
                `VSpacing( 1 ),
                `Heading( _("Password Policy Settings") ),
                `VBox( `VSpacing(0.25),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_overlay ),`opt(`notify ),
                            _("Enable Password Policies"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_hashcleartext ),
                            _("Hash Clear Text Passwords"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `HBox(
                        `CheckBox( `id( `cb_ppolicy_uselockout ),
                            _("Disclose \"Account Locked\" Status"), false
                        ),
                        `HSpacing( `opt(`hstretch))
                    ),
                    `VSquash(
                        `HBox(
                            `InputField( `id( `te_ppolicy_defaultpolicy ),
                                `opt( `hstretch ),
                                _("Default Policy Object DN"), "cn=Default Policy"
                            ),
                            `HSpacing( 0.5 ),
                            `VBox(
                                `Bottom(
                                    `CheckBox( `id( `cb_pp_append_basedn ),
                                            _("&Append Base DN"), true
                                    )
                                ),
                                `VSpacing( 0.3 )
                            )
                        )
                    ),
                    `VSpacing(0.25)
                )
            )
        );

    define map<string,string> ChangeAdminPassword()
    {
        map<string,string> result = nil;
        term content =
            `VBox(
                `Heading( _("Change Administrator Password") ),
                `Password( `id( `te_rootpw ), _("New Administrator &Password") ),
                `HSpacing( 0.5 ),
                `Password( `id( `te_valid_rootpw ), _("&Validate Password") ),
                `HSpacing( 0.5 ),
                `ComboBox( `id( `cb_cryptmethod ), _("Password &Encryption"), enc_types ),
                `HBox(
                    `PushButton( `id( `pb_ok ), Label::OKButton() ),
                    `PushButton( `id( `pb_cancel ), Label::CancelButton() )
                )
            );
        UI::OpenDialog( `opt(`decorated), content );
        while ( true )
        {
            any ret = UI::UserInput();
            if (ret == `pb_cancel )
            {
                break;
            }
            else if ( ret == `pb_ok )
            {
                string pw = (string)UI::QueryWidget( `te_rootpw, `Value );
                string verifypw = (string)UI::QueryWidget( `te_valid_rootpw, `Value );
                string hashAlgo = (string)UI::QueryWidget( `cb_cryptmethod, `Value );
                if ( size(pw) == 0 )
                {
                    Popup::Error( _("Please enter a password") );
                    UI::ChangeWidget( `te_rootpw, `Value, "" );
                    UI::ChangeWidget( `te_valid_rootpw, `Value, "" );
                }
                else if ( pw == verifypw )
                {
                    result = $[];
                    result["password"] = pw;
                    result["hashAlgo"] = hashAlgo;
                    break;
                }
                else
                {
                    Popup::Error( _("The passwords you have enter do not match. Please try again") );
                    UI::ChangeWidget( `te_rootpw, `Value, "" );
                    UI::ChangeWidget( `te_valid_rootpw, `Value, "" );
                }
            }
        }
        UI::CloseDialog();
        return result;
    }

    define map<string,any> DatabaseIndexPopup( list<string> skipAttrs, string editAttr,
                                                map<string, boolean> currentIdx )
    {
        y2milestone("AddIndexPopup skipAttrs: %1", skipAttrs );
        term content =
            `VBox(
                `Heading( _("Add Index") ),
                `ReplacePoint( `id( `rp_attrs ),
                        `ComboBox( `id( `cb_attrs ), `opt( `hstretch, `notify ), "Attributetypes" )
                ),
                `Left(
                    `CheckBox( `id( `cb_idx_pres ), _("Presence") )
                ),
                `Left(
                    `CheckBox( `id( `cb_idx_eq ), _("Equality") )
                ),
                `Left(
                    `CheckBox( `id( `cb_idx_substr ), _("Substring") )
                ),
                `HBox(
                    `PushButton( `id( `pb_ok ), Label::OKButton() ),
                    `PushButton( `id( `pb_cancel ), Label::CancelButton() )
                )
            );

        map <string, map<string,boolean> > attrTypes =
                (map<string, map <string,boolean> >) SCR::Read( .ldapserver.schema.attributeTypes );
        if ( editAttr == "" ) {
            list<string> items = [];
            foreach(string key, map<string,boolean> idx, attrTypes, {
                if ( nil == find( string elem,  skipAttrs, ``( tolower(elem) == tolower(key) ) ) ) {
                    items = add( items, key );
                }
            } );
            items = lsort(items);
            UI::OpenDialog( `opt(`decorated), content );
            UI::ChangeWidget( `cb_attrs, `Items, items );
        } else {
            UI::OpenDialog( `opt(`decorated), content );
            UI::ReplaceWidget(`rp_attrs,
                `Label( `id( `attr ), editAttr)
            );
            y2milestone("Current IDX: %1", currentIdx );
            if ( currentIdx["eq"]:false ) {
                UI::ChangeWidget( `cb_idx_eq, `Value, true );
            }
            if ( currentIdx["pres"]:false ) {
                UI::ChangeWidget( `cb_idx_pres, `Value, true );
            }
            if ( currentIdx["sub"]:false ) {
                UI::ChangeWidget( `cb_idx_substr, `Value, true );
            }
        }

        string selectedAttr = "";
        if ( editAttr == "" )
        {
            selectedAttr = (string) UI::QueryWidget( `cb_attrs, `Value );
        } else {
            selectedAttr = editAttr;
        }

        y2milestone("selected Attribute \"%1\"", selectedAttr );
        map <string, boolean> idxOpt = attrTypes[selectedAttr]:nil ;
        y2milestone("index opts: %1", idxOpt );
        if ( idxOpt["equality"]:false )
        {
            UI::ChangeWidget( `cb_idx_eq, `Enabled, true );
        } else {
            UI::ChangeWidget( `cb_idx_eq, `Enabled, false );
        }
        if ( idxOpt["substring"]:false )
        {
            UI::ChangeWidget( `cb_idx_substr, `Enabled, true );
        } else {
            UI::ChangeWidget( `cb_idx_substr, `Enabled, false );
        }
        if ( idxOpt["presence"]:false )
        {
            UI::ChangeWidget( `cb_idx_pres, `Enabled, true );
        } else {
            UI::ChangeWidget( `cb_idx_pres, `Enabled, false );
        }

        map<string,any> retval = $[];
        while (true)
        {
            any ret = UI::UserInput();
            y2milestone("ret = %1", ret );
            if (ret == `pb_cancel )
            {
                break;
            }
            if ( editAttr == "" )
            {
                selectedAttr = (string) UI::QueryWidget( `cb_attrs, `Value );
                y2milestone("selected Attribute \"%1\"", selectedAttr );
            }
            if ( ret == `cb_attrs ) // Attribute selected in the Combobox
            {
                map <string, boolean> idxOpt = attrTypes[selectedAttr]:nil ;
                y2milestone("index opts: %1", idxOpt );
                if ( idxOpt["equality"]:false )
                {
                    UI::ChangeWidget( `cb_idx_eq, `Enabled, true );
                } else {
                    UI::ChangeWidget( `cb_idx_eq, `Enabled, false );
                }
                if ( idxOpt["substring"]:false )
                {
                    UI::ChangeWidget( `cb_idx_substr, `Enabled, true );
                } else {
                    UI::ChangeWidget( `cb_idx_substr, `Enabled, false );
                }
                if ( idxOpt["presence"]:false )
                {
                    UI::ChangeWidget( `cb_idx_pres, `Enabled, true );
                } else {
                    UI::ChangeWidget( `cb_idx_pres, `Enabled, false );
                }
            } else if (ret == `pb_ok )
            {
                retval["name"] = selectedAttr;
                retval["pres"] = UI::QueryWidget( `cb_idx_pres, `Value );
                retval["eq"] = UI::QueryWidget( `cb_idx_eq, `Value );
                retval["sub"] = UI::QueryWidget( `cb_idx_substr, `Value );
                y2milestone("new index: %1", retval );
                break;
            }
        }
        UI::CloseDialog();
        return retval;
    }
}
