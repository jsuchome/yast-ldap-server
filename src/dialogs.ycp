/**
 * File:	include/ldap-server/dialogs.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Dialogs definitions
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 */

{

textdomain "ldap-server";

import "CWMFirewallInterfaces";
import "Label";
import "Wizard";
import "LdapServer";
import "HTML";
import "Report";

include "ldap-server/helps.ycp";
include "ldap-server/tree_structure.ycp";

string section_id = "";

                 /*heading for all dialogs*/
string caption = _("LDAP Server Configuration");


/**********************
 ** helper functions **
 **********************/

string error_str = "";

list<map> generateTreeRec( list<map> tree, string parent, list<string> children )
{
    y2milestone( "generating tree for item '%1', children are '%2'", parent, children );
    foreach( string item, children, {
        map<string,any> item_map = widget_map[item]:nil;
        if( item_map == nil )
        {
            error_str = "item "+item+" does not exist but is referenced by '"+parent+"'!";
            return nil;
        }
        y2milestone( "adding tree item '%1' to parent %2", item, parent );
        tree = Wizard::AddTreeItem( tree, parent, (string)item_map["name"]:"", item );
        y2milestone( "tree '%1'", tree );
        if( haskey( item_map, "children" ) )
        {
            list<string> childlist = (list<string>)item_map["children"]:[];
            tree = generateTreeRec( tree, item, childlist );
            if( tree == nil ) return nil;
        }
    } );
    return tree;
}

list<map> generateTree()
{
    list<string> baselist = (list<string>)widget_map["base","children"]:[];
    list<map> tree = [];
    y2debug( "generating tree for 'base', children are '%1'", baselist );
    foreach( string item, baselist, {
        map<string,any> item_map = widget_map[item]:nil;
        if( item_map == nil )
        {
            error_str = "item "+item+" does not exist but is referenced by 'base'!";
            return nil;
        }
        y2milestone( "adding tree item '%1' to root", item );
        tree = Wizard::AddTreeItem( tree, "", (string)item_map["name"]:"", item );
        if( haskey( item_map, "children" ) )
        {
            list<string> childlist = (list<string>)item_map["children"]:[];
            tree = generateTreeRec( tree, item, childlist );
            if( tree == nil ) return nil;
        }
    } );

    //create dynamic tree items (databases)
    return tree;
}

boolean callHandler( string item, string handler )
{
    y2milestone("callhandler %1 for item %2", handler, item );
    if( haskey( widget_map[item]:$[], handler ) )
    {
        any function = widget_map[item,handler]:nil;
        if( function != nil )
        {
            if( !(boolean)eval( function ) )
            {
                if (callback_error != "" )
                {
                    Report::Error( callback_error );
                }
                return false;
            }
        } else {
            y2error( sformat ("LdapServer Module: illegal handler '%1' for item '%2'",
			      handler, item));
        }
    }
    return true;
}

string showTreeDialog( string name, boolean focus_tree )
{
    //create new item
    term widget = nil;
    if ( !LdapServer::ReadServiceEnabled() )
    {
        if ( name != "daemon" ) {
            Popup::Error( _("The LDAP Server is currently disabled, no configuration changes are possible.") );
            name = "daemon";
        }
    }
    else if ( !LdapServer::ReadServiceRunning() )
    {
        if ( name != "daemon" ) {
            symbol ret = Popup::AnyQuestion3( _("The LDAP Server is not running."),
                    _("Do you want to start it now to re-read its configuration data or do you want to creat a new configuration from scratch?"),
                    _("Restart"),
                    _("New Configuration"),
                    Label::AbortButton(),
                    `focus_yes );
            name = "daemon";
            if ( ret == `yes )
            {
                return "__reread__";
            }
            else if ( ret == `no )
            {
                return "__empty__";
            }
            else if ( ret == `retry )
            {
                return name;
            }
        }
    }
    widget = (term)widget_map[name,"widget"]:`Label( "Loading widget for item '"+name+"' failed." );

    //get helps page
    string help_page = (string)widget_map[name,"help_page"]:name;
    string help_string = HELPS[help_page]:("help page for item <b>"+help_page+"</b> not available");

    Wizard::SetAbortButton(`abort, Label::CancelButton());
    Wizard::SetContentsButtons( caption, widget, help_string,
        Label::BackButton(), Label::OKButton() );
    Wizard::HideBackButton();


    if( focus_tree ) UI::SetFocus( `id( `wizardTree ) );

    return name;
}


/**********************
 ** dialog functions **
 **********************/

term dlg_service_initial =
    `HSquash(
        `VBox(
            `Heading( _("General Settings") ),
            `VSpacing(),
            `VBox(
                `Frame( _("&Start LDAP Server"),
                    `VBox(
                        `RadioButtonGroup(
                            `VBox(
                                `Left( `RadioButton( `id( `rb_yes ), `opt( `notify ),
                                            Label::YesButton(),
                                            false ) ),
                                `Left( `RadioButton( `id( `rb_no ), `opt( `notify ),
                                            Label::NoButton(),
                                            true ) )
                            )
                        ),
                        `Left( `CheckBox( `id( `cb_register_slp ),
                                    _("Register at an &SLP Daemon"),
                                    LdapServer::ReadSLPEnabled() )),
                        `HStretch()
                    )
                )
            ),
            `VSpacing(),
            `VBox(
                `Frame( _("Firewall Settings"),
                    `VBox(
                        `ReplacePoint( `id( `rp_firewall ),
                            `Empty()
                        ),
                        `HStretch()
                    )
                )
            )
        )
    );

any EnableServiceDialog()
{
    map <string, any> defaults = LdapServer::ReadInitialDefaults();
    map<string, any> firewall_settings = $[
            "services": [ "service:openldap" ],
            "display_details": true,
         ];
    map<string, any> firewall_widget =
	CWMFirewallInterfaces::CreateOpenFirewallWidget (firewall_settings);

    Wizard::SetContentsButtons( caption, dlg_service_initial,
                                HELPS["service_dialog"]:"help not found",
                                Label::BackButton(), Label::NextButton() );
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton());

    UI::ReplaceWidget(`rp_firewall,
            firewall_widget["custom_widget"]:`Empty()
    );
    CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");

    if( (boolean)defaults["serviceEnabled"]:true )
    {
        UI::ChangeWidget( `rb_yes, `Value, true );
        Wizard::SetNextButton( `next, Label::NextButton());
    }
    else
    {
        UI::ChangeWidget( `cb_register_slp, `Enabled, false );
        Wizard::SetNextButton( `finish , Label::FinishButton());
    }
    UI::ChangeWidget( `cb_register_slp, `Value, defaults["slpRegister"]:false );

    any ret = nil;
    map event = $[];
    while( true )
    {
        event = UI::WaitForEvent ();
        ret = event["ID"]:nil;
        CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);
        y2milestone( "EnableServiceDialog: seeing return value '%1'", ret );

        if( ret == `back || ret == `abort || ret == `cancel) break;
        else if( ret == `next || ret == `finish )
        {
            CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);
            if ( (boolean)UI::QueryWidget( `cb_register_slp, `Value ) )
            {
                defaults["slpRegister"] = 1;
            }
            else
            {
                defaults["slpRegister"] = 0;
            }
            LdapServer::SetInitialDefaults(defaults);
            break;
        }
        else if( ret == `rb_yes )
        {
            defaults["serviceEnabled"] = true;
            UI::ChangeWidget( `cb_register_slp, `Enabled, true );
            Wizard::SetNextButton( `next , Label::NextButton());
        } else if( ret == `rb_no )
        {
            defaults["serviceEnabled"] = false;
            UI::ChangeWidget( `cb_register_slp, `Enabled, false );
            Wizard::SetNextButton( `finish , Label::FinishButton());
        }
    }

    return ret;
}

any ServerTypeDialog()
{
    term serverTypeWidget =
        `HSquash(
            `VBox(
                `Heading( _("Please select Server type") ),
                `VSpacing(),
                `RadioButtonGroup(
                    `id( `rbg_servertype ),
                    `VBox(
                        `Left(
                            `RadioButton(
                                `id( `rb_standalone ),
                                _("This will be a standalone server"),
                                true
                            )
                        ),
                        `VSpacing(),
                        `Left(
                            `RadioButton(
                                `id( `rb_master ),
                                _("This server can act as a master server in a replication setup"),
                                false
                            )
                        ),
                        `VSpacing(),
                        `Left(
                            `RadioButton(
                                `id( `rb_slave ),
                                _("This will be a replica (slave) server.\n") +
                                _("All data including configuration will replicated from a remote server."),
                                false
                            )
                        )
                    )
                )
            )
        );
    Wizard::SetContentsButtons( caption,
            serverTypeWidget,
            HELPS["server_type"]:"help not found",
            Label::BackButton(),
            Label::NextButton() );
    any ret = nil;
    while ( true )
    {
        ret = UI::UserInput();
        y2milestone( "TlsConfigDialog: seeing return value '%1'", ret );
        if ( ret == `next )
        {
            if (UI::QueryWidget( `id( `rbg_servertype ), `CurrentButton) == `rb_slave )
            {
                ret = `slave_setup;
                LdapServer::WriteSetupMaster(false);
            }
            else if (UI::QueryWidget( `id( `rbg_servertype ), `CurrentButton) == `rb_master )
            {
                LdapServer::WriteSetupMaster(true);
            }
            else
            {
                LdapServer::WriteSetupMaster(false);
            }
        }
        return ret;
    }
    return ret;
}

any TlsConfigDialog()
{
    Wizard::SetContentsButtons( caption,
            tlsWidget,
            HELPS["tls_dialog"]:"help not found",
            Label::BackButton(),
            Label::NextButton() );
    LdapServer::InitGlobals();
    cb_read_tls();
    any ret = nil;
    while( true )
    {
        ret = UI::UserInput();
        y2milestone( "TlsConfigDialog: seeing return value '%1'", ret );

        if( ret == `back )
        {
            break;
        }
        if( ret == `abort || ret == `cancel )
        {
	    if( Popup::ReallyAbort(true) )
            {
                break;
            }
	    else
            {
                continue;
            }
        }
        else if( ret == `next || ret == `finish )
        {
            if (! cb_write_tls() )
            {
                Report::Error( callback_error );
                continue;
            }
            break;
        }
        else if( is( ret, symbol ) )
        {
            handler_cmd = (symbol)ret;
            cb_input_tls();
        }
    }

    return ret;

}

any ProposalDialog()
{
    symbol ret = LdapDatabase::AddDbBasic(true);
    if ( ret == `next )
    {
        LdapServer::SetInitialDefaults(LdapDatabase::GetDatabase());
        LdapServer::WriteLdapConfBase( LdapDatabase::GetLdapConfBase() );
        if ( LdapServer::ReadSetupMaster() )
        {
            ret = `mastersetup;
        }
    }

    return ret;
}

any TreeDialog()
{
    //close service dialog
//    UI::CloseDialog();
    Wizard::CreateTreeDialog();
    Wizard::SetDesktopIcon("ldap-server");
    //item selected at start
    current_tree_item = "daemon";

    //trigger initial build of widget tree
    rebuild_widget_tree = true;

    any ret = nil;
    while( true )
    {
        if( rebuild_widget_tree )
        {
            //generate tree
            Wizard::DeleteTreeItems();
            deleteDynamicTreeItems();
            if ( LdapServer::ReadServiceRunning() )
            {
                generateDynamicTreeItems();
            }
            widget_tree = generateTree();
            if( widget_tree == nil )
            {
                y2error( "error when generating widget tree: %1", error_str );
            }

            /* tree widget headline */
            Wizard::CreateTree( widget_tree, _("Configuration:") );

            //select&show current item
            current_tree_item = showTreeDialog( current_tree_item, ( widget_tree == [] ) ? false : true );
            Wizard::SelectTreeItem( current_tree_item );
            //initialize current dialog
            callHandler( current_tree_item, "cb_read" );
            rebuild_widget_tree = false;
        }
        map event = UI::WaitForEvent();
        ret = event["ID"]:nil;
        y2milestone( "TreeDialog: seeing return value %1", ret );

        if( is( ret, string ) || ret == `wizardTree )
        {
            string new_item = Wizard::QueryTreeItem();

            // workaround to catch changes in the firewall widget
            if ( is( ret, string) && ( issubstring( (string)ret, "firewall" ) ) )
            {
                CWMFirewallInterfaces::OpenFirewallHandle (fw_widget, "", event);
                continue;
            }

            //check values of current tree item
            y2milestone( "wizard-->current item is %1", current_tree_item );

            if( !callHandler( current_tree_item, "cb_check" ) )
            {
                Wizard::SelectTreeItem( current_tree_item );
                continue;
            }

            if( !callHandler( current_tree_item, "cb_write" ) )
            {
                Wizard::SelectTreeItem( current_tree_item );
                continue;
            }

            current_tree_item = showTreeDialog( new_item, (ret == `wizardTree) ? true : false );
            if ( current_tree_item == "__reread__" )
            {
                ret = `reread;
                break;
            }
            if ( current_tree_item == "__empty__" )
            {
                ret = `empty;
                break;
            }
            Wizard::SelectTreeItem( current_tree_item );

            callHandler( current_tree_item, "cb_read" );

        }
        else if( is( ret, symbol ) )
        {
            symbol sym_ret = (symbol)ret;
            if( sym_ret == `abort || sym_ret == `cancel)
            {
                if( Popup::ReallyAbort(true) )
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            else if ( sym_ret == `back || sym_ret == `reread ) break;
            else if( sym_ret == `next )
            {
                if( !callHandler( current_tree_item, "cb_check" ) ) continue;
                if( !callHandler( current_tree_item, "cb_write" ) ) continue;
                break;
            }
            else if( haskey( widget_map[current_tree_item]:$[], "cb_input" ) )
            {
                //call input handler of current tree item
                any function = widget_map[current_tree_item,"cb_input"]:nil;
                if( function != nil )
                {
                    //############## input handler ################
                    handler_cmd = sym_ret;
                    if( !(boolean)eval( function ) )
                    {
                        Report::Error( callback_error );
                        continue;
                    }
                } else
                {
                    Report::Error( "LdapServer Module: illegal input handler for item '"+current_tree_item+"'" );
                }
            }
        }
    }
    return ret;
}

any SlaveSetupDialog()
{
    term widget =
        `HSquash(
            `VBox(
                `Heading( _("Slave server setup") ),
                `VSpacing(),
                `VSquash(
                    `HBox(
                        `ComboBox( `id( `cb_sync_prot ), `opt(`notify), _("Protocol"), [ "ldap", "ldaps" ] ),
                        `HSpacing(),
                        `InputField( `id( `te_sync_target ), `opt(`hstretch), _("Provider Hostname"), "" ),
                        `HSpacing(),
                        `HSquash(
                            `IntField( `id(`if_sync_port), "Port", 0, 65536, 389)
                        ),
                        `HSpacing(),
                        `VBox(
                            `Bottom(
                                `CheckBox( `id( `cb_start_tls ), _("Use StartTLS"), true )
                            ),
                            `VSpacing(0.3)
                        )
                    )
                ),
                `VSpacing(0.3),
                `Password( `id( `te_config_cred ), `opt(`hstretch), _("Administration Password for the \"cn=config\" Database"), "" ),
                `VSpacing(0.3),
                `HBox(
                    `InputField( `id( `te_sync_binddn ), `opt(`hstretch), _("Authentication DN to use for replication"), "" ),
                    `HSpacing(),
                    `Password( `id( `te_sync_cred ), `opt(`hstretch), _("Password"), "" )
                )
            )
        );

    Wizard::SetContentsButtons( caption,
            widget,
            HELPS["slave_dialog"]:"help not found",
            Label::BackButton(),
            Label::NextButton() );
    any ret = nil;
    while ( true )
    {
        UI::ChangeWidget(`cb_start_tls, `Enabled, false );
        ret = UI::UserInput();
        y2milestone( "SlaveSetupDialog: seeing return value '%1'", ret );
        if ( ret == `next )
        {
            // test connection
            map<string,any> provider = $[
                    "protocol" : (string)UI::QueryWidget( `cb_sync_prot, `Value ),
                    "target"   : (string)UI::QueryWidget( `te_sync_target, `Value ),
                    "port"     : (integer)UI::QueryWidget( `if_sync_port, `Value )
                ];
            map<string,any> testparm = $[];
            testparm = add(testparm, "target", provider );
            if ( provider["protocol"]:"ldap" == "ldap" )
            {
                testparm = add(testparm, "starttls", true );
            }
            else
            {
                testparm = add(testparm, "starttls", false );
            }
            testparm = add(testparm, "basedn", "cn=config" );
            testparm = add(testparm, "binddn", "cn=config" );
            testparm = add(testparm, "credentials", (string)UI::QueryWidget(`te_config_cred, `Value) );
            if(!(boolean)SCR::Execute( .ldapserver.remoteBindCheck, testparm ) )
            {
                map<string,any> err = SCR::Error(.ldapserver);
                Popup::ErrorDetails( _("Verifying the administration Password for the \"cn=config\" Database failed"),
                        _("The test returned the following error messages:")
                        + "\n\n\"" +
                        (string)err["summary"]:"" + "\"\n\"" + (string)err["description"]:"" + "\"\n" );
                continue;
            }

            testparm["configcred"] = testparm["credentials"]:"";
            testparm["binddn"] = (string)UI::QueryWidget(`te_sync_binddn, `Value);
            testparm["credentials"] = (string)UI::QueryWidget(`te_sync_cred, `Value);
            if(!(boolean)SCR::Execute( .ldapserver.remoteBindCheck, testparm ) )
            {
                map<string,any> err = SCR::Error(.ldapserver);
                return Popup::ContinueCancelHeadline(
                                               _("Verifying the Authentication DN and password for replication failed"),
                                               _("The test returned the following error messages:")
                                               + "\n\n\"" +
                                               (string)err["summary"]:"" + "\"\n\"" + (string)err["description"]:""
                                               + "\"\n\n" +
                                               _("Do you want to still want to continue?"));
            }
            if (!(boolean) LdapServer::CheckRemoteForReplication( testparm ) )
            {
                map<string,any> err = LdapServer::ReadError();
                Popup::Error( (string)err["msg"]:"" + "\n" + (string)err["details"]:"" + "\n" );
            }
        }
        if ( ret == `cb_sync_prot )
        {
            string prot = (string) UI::QueryWidget( `cb_sync_prot, `Value );
            integer port = (integer) UI::QueryWidget( `if_sync_port, `Value );
            if ( prot == "ldaps" )
            {
                UI::ChangeWidget( `cb_start_tls, `Value, false );
                if ( port == 389 )
                {
                    UI::ChangeWidget( `if_sync_port, `Value, 636 );
                }
            }
            else
            {
                UI::ChangeWidget( `cb_start_tls, `Value, true );
                if ( port == 636 )
                {
                    UI::ChangeWidget( `if_sync_port, `Value, 389 );
                }
            }
            continue;
        }
        return ret;
    }
    return ret;
}

/**
 * ReplicatonSummary dialog
 * @return dialog result
 */
any ReplicatonSetupSummaryDialog() {

    /* LdapServer summary dialog caption */

    string summary = LdapServer::ReplicationSetupSummary();
    any ret = nil;

    if ( size(summary) == 0 )
    {
        LdapServer::SetupRemoteForReplication();
        ret = `next;
    }
    else
    {
        string caption = _("To setup a replication some changes are required on the remote server");
        term contents =
            `VBox(
                `RichText( summary )
                //,
                //`Right(
                //    `PushButton( `id(`pb_advanced), _("Advanced Configuration") )
                //)
            );

        Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
                Label::BackButton(), Label::FinishButton());

        while(true)
        {

            ret = UI::UserInput();

            /* abort? */
            if (ret == `abort || ret == `cancel )
            {
                if( Popup::ReallyAbort(true))
                {
                    break;
                }
                else
                {
                    continue;
                }
            }
            else if ( ret == `next )
            {
                LdapServer::SetupRemoteForReplication();
                break;
            }
            else if ( ret == `back )
            {
                break;
            }
            else {
                y2error("unexpected retcode: %1", ret);
                continue;
            }
        }
    }
    return ret;
}

any MasterSetupDialog()
{
    term widget =
        `HSquash(
            `VSquash(
                `VBox(
                    `Heading( _("Repliation Master setup") ),
                    `VSpacing( 0.5 ),
                    `Label( _("In order to act as a Master Server for Replication, the Configuration database needs\nto be remotely accessible. Please set a password for the Configuration database." ) +
                            _("\n(Remote access to the Configuration database will be restricted to encrypted\nLDAP Connections)")
                    ),
                    `VSpacing( 0.5 ),
                    `Password( `id( `te_rootpw ), `opt( `hstretch ), _("Enter new &Password") ),
                    `VSpacing( 0.5 ),
                    `Password( `id( `te_valid_rootpw ), `opt( `hstretch ), _("&Validate Password") )
                )
            )
        );
    Wizard::SetContentsButtons( caption,
            widget,
            HELPS["master_setup_dialog"]:"help not found",
            Label::BackButton(),
            Label::NextButton() );
    any ret = nil;
    while ( true )
    {
        ret = UI::UserInput();
        if ( ret == `next )
        {
            string pw = (string)UI::QueryWidget( `te_rootpw, `Value );
            string verifypw = (string)UI::QueryWidget( `te_valid_rootpw, `Value );
            if ( size(pw) == 0 )
            {
                Popup::Error( _("Please enter a password") );
                UI::ChangeWidget( `te_rootpw, `Value, "" );
                UI::ChangeWidget( `te_valid_rootpw, `Value, "" );
            }
            else if ( pw != verifypw )
            {
                Popup::Error( _("The passwords you have enter do not match. Please try again") );
                UI::ChangeWidget( `te_rootpw, `Value, "" );
                UI::ChangeWidget( `te_valid_rootpw, `Value, "" );
                pw = "";
                verifypw ="";
            }
            else
            {
                map <string, any> defaults = LdapServer::ReadInitialDefaults();
                defaults["configpw"] = pw;
                LdapServer::SetInitialDefaults(defaults);
                break;
            }
        }
        else
        {
            break;
        }
    }
    return ret;
}

/* EOF */
}
