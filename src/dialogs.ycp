/**
 * File:	include/ldap-server/dialogs.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Dialogs definitions
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 */

{

textdomain "ldap-server";

import "CWMFirewallInterfaces";
import "Label";
import "Wizard";
import "LdapServer";
//import "LdapServerConf";
import "HTML";
import "DNS";
import "CaMgm";
import "Report";
import "YaPI::LdapServer";

include "ldap-server/helps.ycp";
include "ldap-server/tree_structure.ycp";

string section_id = "";

                 /*heading for all dialogs*/
string caption = _("LDAP Server Configuration");


/**********************
 ** helper functions **
 **********************/

string error_str = "";

list<map> generateTreeRec( list<map> tree, string parent, list<string> children )
{
    y2milestone( "generating tree for item '%1', children are '%2'", parent, children );
    foreach( string item, children, {
        map<string,any> item_map = widget_map[item]:nil;
        if( item_map == nil )
        {
            error_str = "item "+item+" does not exist but is referenced by '"+parent+"'!";
            return nil;
        }
        y2milestone( "adding tree item '%1' to parent %2", item, parent );
        tree = Wizard::AddTreeItem( tree, parent, (string)item_map["name"]:"", item );
        y2milestone( "tree '%1'", tree );
        if( haskey( item_map, "children" ) )
        {
            list<string> childlist = (list<string>)item_map["children"]:[];
            tree = generateTreeRec( tree, item, childlist );
            if( tree == nil ) return nil;
        }
    } );
    return tree;
}

list<map> generateTree()
{
    list<string> baselist = (list<string>)widget_map["base","children"]:[];
    list<map> tree = [];
    y2debug( "generating tree for 'base', children are '%1'", baselist );
    foreach( string item, baselist, {
        map<string,any> item_map = widget_map[item]:nil;
        if( item_map == nil )
        {
            error_str = "item "+item+" does not exist but is referenced by 'base'!";
            return nil;
        }
        y2milestone( "adding tree item '%1' to root", item );
        tree = Wizard::AddTreeItem( tree, "", (string)item_map["name"]:"", item );
        if( haskey( item_map, "children" ) )
        {
            list<string> childlist = (list<string>)item_map["children"]:[];
            tree = generateTreeRec( tree, item, childlist );
            if( tree == nil ) return nil;
        }
    } );

    //create dynamic tree items (databases)
    return tree;
}

boolean callHandler( string item, string handler )
{
    y2milestone("callhandler %1 for item %2", handler, item );
    if( haskey( widget_map[item]:$[], handler ) )
    {
        any function = widget_map[item,handler]:nil;
        if( function != nil )
        {
            if( !(boolean)eval( function ) )
            {
                Report::Error( callback_error );
                return false;
            }
        } else {
            y2error( sformat ("LdapServer Module: illegal handler '%1' for item '%2'",
			      handler, item));
        }
    }
    return true;
}

void showTreeDialog( string name, boolean focus_tree )
{
    //create new item
    term widget = (term)widget_map[name,"widget"]:`Label( "Loading widget for item '"+name+"' failed." );

    //get helps page
    string help_page = (string)widget_map[name,"help_page"]:name;
    string help_string = HELPS[help_page]:("help page for item <b>"+help_page+"</b> not available");

    Wizard::SetContentsButtons( caption, widget, help_string,
        Label::BackButton(), Label::FinishButton() );

    Wizard::DisableBackButton();

    if( focus_tree ) UI::SetFocus( `id( `wizardTree ) );
}


/**********************
 ** dialog functions **
 **********************/

term dlg_service = `HSquash(
    `VBox(
        `Heading( _("General Settings") ),
        `VBox(
            `Frame( _("&Start LDAP Server"),
                `VBox(
                    `RadioButtonGroup(
                        `VBox(
                            `Left( `RadioButton( `id( `rb_yes ), `opt( `notify ),
                                        Label::YesButton(),
                                        false ) ),
                            `Left( `RadioButton( `id( `rb_no ), `opt( `notify ),
                                        Label::NoButton(),
                                        true ) )
                        )
                    ),
                    `Left( `CheckBox( `id( `cb_register_slp ),
                                _("Register at an &SLP Daemon"),
                                LdapServer::ReadSLPEnabled() )),
                    `HStretch()
                )
            )
        ),
        `VSpacing(),
        `VBox(
            `Frame( _("Firewall Settings"),
                `VBox(
                    fw_widget["custom_widget"]:`Empty(),
                    `HStretch()
                )
            )
        )
    )
);
any EnableServiceDialog()
{
    map <string, any> defaults = LdapServer::GetInitialDefaults();
    map<string, any> firewall_settings = $[
            "services": [ "ldap" , "ldaps" ],
            "display_details": true,
         ];
    map<string, any> firewall_widget =
	CWMFirewallInterfaces::CreateOpenFirewallWidget (firewall_settings);

    Wizard::SetContentsButtons( caption, dlg_service, HELPS["service_dialog"]:"help not found",
    Label::BackButton(), Label::NextButton() );

    if( (boolean)defaults["serviceEnabled"]:true )
    {
        UI::ChangeWidget( `rb_yes, `Value, true );
    }
    else
    {
        UI::ChangeWidget( `cb_register_slp, `Enabled, false );
    }

    CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");
    any ret = nil;
    map event = $[];
    while( true )
    {
        event = UI::WaitForEvent ();
        ret = event["ID"]:nil;
        CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);
        y2milestone( "EnableServiceDialog: seeing return value '%1'", ret );

        if( ret == `back || ret == `abort || ret == `cancel) break;
        else if( ret == `next || ret == `finish )
        {
            CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);
            if ( (boolean)UI::QueryWidget( `cb_register_slp, `Value ) )
            {
                defaults["slpRegister"] = 1;
            }
            else
            {
                defaults["slpRegister"] = 0;
            }
            LdapServer::SetInitialDefaults(defaults);
            break;
        }
        else if( ret == `rb_yes )
        {
            defaults["serviceEnabled"] = true;
            UI::ChangeWidget( `cb_register_slp, `Enabled, true );
        } else if( ret == `rb_no )
        {
            defaults["serviceEnabled"] = false;
            UI::ChangeWidget( `cb_register_slp, `Enabled, false );
        }
    }

    return ret;
}

any ProposalDialog()
{
    map <string, any> defaults = LdapServer::GetInitialDefaults();
    string enctype = "";
    boolean useCommonCA = false;
    boolean common_ca_available = ( CaMgm::prop_selection == `def || CaMgm::prop_selection == `floppy || CaMgm::prop_selection == `expert );

    if( !common_ca_available )
    {
        useCommonCA = false;
    }

    boolean append_checked = true;

    if( defaults["rootdn"]:"" != "" )
    {
        integer pos = search( defaults["rootdn"]:"", defaults["basedn"]:"" );
        if( pos > -1 )
        {
            defaults["rootdn"] = substring( defaults["rootdn"]:"", 0, pos-1 );
        } else
        {
            append_checked = false;
        }
    }

    list enc_types = [
        `item( `id( "CRYPT"), "CRYPT", enctype == "CRYPT" ),
        `item( `id( "SMD5" ), "SMD5", enctype == "SMD5" ),
        `item( `id( "SHA" ), "SHA", enctype == "SHA" ),
        `item( `id( "SSHA" ), "SSHA", enctype == "SSHA" ),
        `item( `id( "PLAIN" ), "PLAIN", enctype == "PLAIN" )
    ];

    term dlg_propose =
        `VBox(
            `Heading( _("Database Settings") ),
            `HSquash(
                `VBox (
                    `Left(
                        `InputField(`id( `te_basedn), `opt(`hstretch) , _("&Base DN"), defaults["basedn"]:"" )
                    ),
                    `VSpacing(0.5),
                    `Left(
                        `VSquash(
                            `HBox(
                                `InputField( `id( `te_rootdn ),  _("&Administrator DN"), defaults["rootdn"]:"" ),
                                `HSpacing(),
                                `VBox(
                                    `Bottom(
                                        `CheckBox( `id( `cb_append_basedn ), _("A&ppend Base DN"), append_checked )
                                    ),
                                    `VSpacing( 0.3 )
                                )
                            )
                        )
                    ),
                    `VSpacing(0.5),
                    `Left(
                        `Password( `id( `te_rootpw ), `opt(`hstretch), _("LDAP Administrator &Password"), defaults["rootpw"]:"" )
                    ),
                    `Left(
                        `Password( `id( `te_valid_rootpw ), `opt(`hstretch), _("&Validate Password"), defaults["rootpw"]:"" )
                    ),
                    `Left(
                        `ComboBox( `id( `cmb_cryptmethod ), _("Password &Encryption"), enc_types )
                    )
                )
            )
        );

    Wizard::SetContentsButtons( caption, dlg_propose, HELPS["propose"]:"<p><b>no proposal help text</b></p>",
        Label::BackButton(), Label::NextButton() );

//    if( !LdapServerConf::proposal_changed )
//    {
//                /* notify message */
//        Popup::Notify( _("Changing anything in this dialog disables the automatic
//generation of base DN, root DN, and LDAP password.
//") );
//    }
    if ( ! (boolean)defaults["serviceEnabled"]:false )
    {
        UI::ChangeWidget( `id( `te_basedn ), `Enabled, false );
        UI::ChangeWidget( `id( `te_rootdn ), `Enabled, false );
        UI::ChangeWidget( `id( `cb_append_basedn ), `Enabled, false );
        UI::ChangeWidget( `id( `te_rootpw ), `Enabled, false );
        UI::ChangeWidget( `id( `te_valid_rootpw ), `Enabled, false );
        UI::ChangeWidget( `id( `cmb_cryptmethod ), `Enabled, false );
    }

    any ret = nil;
    map event = $[];
    while( true )
    {
        event = UI::WaitForEvent ();
        ret = event["ID"]:nil;
        y2milestone( "ProposeDialog: seeing return value %1", ret );
        if( ret == `back || ret == `abort || ret == `cancel )
        {
            break;
        }
        else if( ret == `next )
        {
            //validate/update rootpw
            defaults["rootpw"] = (string)UI::QueryWidget( `id( `te_rootpw ), `Value );
            if ( defaults["rootpw"]:"" == "" )
            {
                Popup::Error( _("Please enter a password for the Administrator user") );
                continue;
            }
            if( defaults["rootpw"]:"" != "" )
            {
                if( defaults["rootpw"]:"" != UI::QueryWidget( `id( `te_valid_rootpw ), `Value ) )
                {
                                  /* error popup */
                    Popup::Error( _("Password validation failed.") );
                    defaults["rootpw"] = "";
                    continue;
                }
            }
            //update enctype
            string enctype = (string)UI::QueryWidget( `id( `cmb_cryptmethod ), `Value );
            y2debug( "changing enctype to %1", enctype );
//            LdapServerConf::enctype = enctype;

            //update Base DN
            defaults["basedn"] = (string)UI::QueryWidget( `id( `te_basedn ), `Value );
            y2debug( "changing baseDN to %1", defaults["basedn"]:"" );

            //update rootDN
            defaults["rootdn"] = (string)UI::QueryWidget( `id( `te_rootdn ), `Value );
            if( (boolean)UI::QueryWidget( `id( `cb_append_basedn ), `Value ) )
            {
                defaults["rootdn"] = defaults["rootdn"]:"" + "," + defaults["basedn"]:"";
            }
            LdapServer::SetInitialDefaults(defaults);
            break;
        } else if( ret == `rb_enable )
        {
            y2debug( "enable server clicked" );
            //enable widgets
            UI::ChangeWidget( `id( `te_basedn ), `Enabled, true );
            UI::ChangeWidget( `id( `te_rootdn ), `Enabled, true );
            UI::ChangeWidget( `id( `cb_append_basedn ), `Enabled, true );
            UI::ChangeWidget( `id( `te_rootpw ), `Enabled, true );
            UI::ChangeWidget( `id( `te_valid_rootpw ), `Enabled, true );
            UI::ChangeWidget( `id( `cmb_cryptmethod ), `Enabled, true );
        } else if ( ret == `rb_disable )
        {
            y2debug( "disable server clicked" );
            //disable widgets
            UI::ChangeWidget( `id( `te_basedn ), `Enabled, false );
            UI::ChangeWidget( `id( `te_rootdn ), `Enabled, false );
            UI::ChangeWidget( `id( `cb_append_basedn ), `Enabled, false );
            UI::ChangeWidget( `id( `te_rootpw ), `Enabled, false );
            UI::ChangeWidget( `id( `te_valid_rootpw ), `Enabled, false );
            UI::ChangeWidget( `id( `cmb_cryptmethod ), `Enabled, false );
        }
    }
    return ret;
}

any TreeDialog()
{
    //close service dialog
//    UI::CloseDialog();
    Wizard::CreateTreeDialog();
    //item selected at start
    current_tree_item = "daemon";

    //trigger initial build of widget tree
    rebuild_widget_tree = true;

    any ret = nil;
    while( true )
    {
        if( rebuild_widget_tree )
        {
            //generate tree
            Wizard::DeleteTreeItems();
            deleteDynamicTreeItems();
            generateDynamicTreeItems();
            widget_tree = generateTree();
            if( widget_tree == nil )
            {
                y2error( "error when generating widget tree: %1", error_str );
            }

            /* tree widget headline */
            Wizard::CreateTree( widget_tree, _("Configuration:") );

            //select&show current item
            Wizard::SelectTreeItem( current_tree_item );
            showTreeDialog( current_tree_item, ( widget_tree == [] ) ? false : true );
            //initialize current dialog
            callHandler( current_tree_item, "cb_read" );
            rebuild_widget_tree = false;
        }
        ret = UI::UserInput();
        y2milestone( "TreeDialog: seeing return value %1", ret );
        if( is( ret, string ) || ret == `wizardTree )
        {
            string new_item = Wizard::QueryTreeItem();

            //check values of current tree item
            y2milestone( "wizard-->current item is %1", current_tree_item );

            if( !callHandler( current_tree_item, "cb_check" ) )
            {
                Wizard::SelectTreeItem( current_tree_item );
                continue;
            }

            if( !callHandler( current_tree_item, "cb_write" ) )
            {
                Wizard::SelectTreeItem( current_tree_item );
                continue;
            }

            current_tree_item = new_item;
            showTreeDialog( new_item, (ret == `wizardTree) ? true : false );

            callHandler( new_item, "cb_read" );

        }
        else if( is( ret, symbol ) )
        {
            symbol sym_ret = (symbol)ret;
            if( sym_ret == `back || sym_ret == `abort || sym_ret == `cancel || sym_ret == `reread ) break;
            else if( sym_ret == `next )
            {
                if( !callHandler( current_tree_item, "cb_check" ) ) continue;
                if( !callHandler( current_tree_item, "cb_write" ) ) continue;
                break;
            }
            else if( haskey( widget_map[current_tree_item]:$[], "cb_input" ) )
            {
                //call input handler of current tree item
                any function = widget_map[current_tree_item,"cb_input"]:nil;
                if( function != nil )
                {
                    //############## input handler ################
                    handler_cmd = sym_ret;
                    if( !(boolean)eval( function ) )
                    {
                        Report::Error( callback_error );
                        continue;
                    }
                } else
                {
                    Report::Error( "LdapServer Module: illegal input handler for item '"+current_tree_item+"'" );
                }
            }
        }
    }
    return ret;
}

/* EOF */
}
