/**
 * File:	clients/ldap-server.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Main file
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 *
 * Main file for ldap-server configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of ldap-server</h3>
 */

textdomain "ldap-server";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("LdapServer module started");

import "Progress";
import "Report";
import "Summary";
import "RichText";
import "CommandLine";
include "ldap-server/wizards.ycp";

define boolean serviceHandler (map<string, string> options ) {

    string command = CommandLine::UniqueOption( options,
        ["enable", "disable" ] );
    if( command == nil ) return false;

    LdapServer::WriteServiceEnabled( command == "enable" );

    return true;
}

define boolean getDatabaseListHandler (map options) {

    map<string, any> edb = LdapServer::ReadDatabase();

    string s = "";
    foreach( string suffix, any value, edb,
    {
        s = s + suffix + "<br>";
    });

    CommandLine::Print (RichText::Rich2Plain("<br>"+s));
    
    return false;
}

define boolean addDatabaseHandler (map options ) {

    boolean ret = false;
    map<string, string> db = $[];

    map<string, any> edb = LdapServer::ReadDatabase();
    y2milestone("DBs: %1", edb);


    if (options["basedn"]:nil != nil &&
        edb[options["basedn"]:""]:nil == nil)
    {
        db["suffix"] = options["basedn"]:"";
    }
    else
    {
        CommandLine::Print (_("basedn exists or not available"));
        return false;
    }
    if (options["rootdn"]:nil != nil)
    {
        db["rootdn"] = options["rootdn"]:"";
    }
    if (options["password"]:nil != nil)
    {
        db["passwd"] = options["password"]:"";
    }
    if (options["enctype"]:nil != nil)
    {
        db["cryptmethod"] = options["enctype"]:"";
    }
    if (options["dbdir"]:nil != nil)
    {
        db["directory"] = options["dbdir"]:"";
    }

    if(LdapServer::ReadServiceEnabled() == false)
    {
        // Database cannot be written when the service is not enabled
        LdapServer::WriteServiceEnabled(true);
    }

    y2milestone("db-options : %1", db);

    ret = LdapServer::AddDatabase(db);

    if(!ret)
    {
        CommandLine::Print (_("Error while adding the database"));
        return false;
    }
    return true;
}

define boolean getSchemaListHandler (map options ) {

    string s = "";
    integer i = 0;
    foreach(string v, LdapServer::ReadSchemaIncludeList (),
    {
        i = i + 1;
        s = s + tostring(i) + " "+ v +"<br>"; 
    });

    CommandLine::Print (RichText::Rich2Plain("<br>"+s));
    return false; // do not call Write...
}

define boolean addSchemaHandler (map options ) {

    boolean ret = false;
    if (options["file"]:"" != "")
    {
        string file = options["file"]:"";
        if(options["pos"]:"" != "")
        {
            integer pos = tointeger (options["pos"]:"");
            if (pos == nil || pos < 0)
            {
                // error: wrong input (probably string or negative integer)
                Report::Error (_("The value for pos must be a positive integer."));
                return false;
            }

            list<string> l =  LdapServer::ReadSchemaIncludeList ();
            list<string> rl = [];
            boolean added = false;
            integer i = 0;
            foreach(string s, l,
            {
                i = i + 1;
                if(i == pos)
                {
                    rl = add(rl, file);
                    added = true;
                }
                rl = add(rl, s);
            });
        if(!added)
        {
           rl = add(rl, file);
        } 
        LdapServer::WriteSchemaIncludeList (rl);
        ret = true;
        }
    }

    return ret;
}

define boolean delSchemaHandler (map options ) {

    boolean ret = false;
    if(options["pos"]:"" != "")
    {
        integer pos = tointeger (options["pos"]:"");
        if (pos == nil || pos < 0)
        {
            // error: wrong input (probably string or negative integer)
            Report::Error (_("The value for pos must be a positive integer."));
            return false;
        }

        list<string> l =  LdapServer::ReadSchemaIncludeList ();
        list<string> rl = [];
        integer i = 0;
        foreach(string s, l,
        {
            i = i + 1;
            if(i != pos)
            {
                rl = add(rl, s);
            }
        });
        LdapServer::WriteSchemaIncludeList (rl);
        ret = true;
    }

    return ret;
}



map cmdline_description = $[
    "id" 	: "ldap-server",
    /* Command line help text for the Xldap-server module */
    "help"	: _("Configuration of LDAP server"),
    "guihandler"        : LdapServerSequence,
    "initialize"        : LdapServer::Read,
    "finish"            : LdapServer::Write,
    "actions"           : $[
        "service"     : $[
                        "handler"   : serviceHandler,
                        "help"      : _("Enable/Disable the service")
                        ],
        "addDatabase" : $[
                        "handler"   : addDatabaseHandler,
                        "help"      : _("Add a new Database"),
                        ],
        "getDatabaseList" : $[
                        "handler"   : getDatabaseListHandler,
                        "help"      : _("Show a List of currently available Databases"),
                        ],
        "getSchemaList": $[
                        "handler"   : getSchemaListHandler,
                        "help"      : _("Show a List of currently configured schemas"),
                        ],
        "addSchema":    $[
                        "handler"   : addSchemaHandler,
                        "help"      : _("Add a schema to the list"),
                        ],
        "delSchema":    $[
                        "handler"   : delSchemaHandler,
                        "help"      : _("Delete a schema from the list"),
                        ],
    ],
    "options"		: $[
        "enable" : $[ "help"      : _("Enable the service") ],
        "disable" : $[ "help"      : _("Disable the service") ],
        "basedn" : $[
                    "help" : _("Base DN for the database"),
                    "type" : "string"
        ],
        "rootdn" : $[
                    "help" : _("DN for the administrator login"),
                    "type" : "string"
        ],
        "password" : $[
                    "help" : _("Administrator password"),
                    "type" : "string"
        ],
        "enctype" : $[
                    "help" : "SSHA, SHA, SMD5, CRYPT, PLAIN",
                    "type" : "string"
        ],
        "dbdir" : $[
                    "help" : _("Directory for the database"),
                    "type" : "string"
        ],
        "file" : $[
                    "help" : _("File"),
                    "type" : "string"
        ],
        "pos" : $[
                    "help" : _("Position"),
                    "type" : "string"
        ]
    ],
    "mappings"		: $[
        "service" :[ "enable", "disable" ],
        "addDatabase" : [ "basedn", "rootdn", "password", "enctype", "dbdir" ],
        "getDatabaseList" : [],
        "getSchemaList" : [],
        "addSchema": [ "file", "pos" ],
        "delSchema": [ "pos" ]
    ]
];

/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
        y2milestone("Using PROPOSE mode");
        propose = true;
    }
}

/* main ui function */
any ret = nil;

if(propose) ret = ProposalSequence();
else ret = CommandLine::Run(cmdline_description);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("LdapServer module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
