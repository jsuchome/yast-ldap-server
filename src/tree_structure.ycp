/**
 * File:	include/ldap-server/tree_structure.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Widget Tree structure
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 */
{
textdomain "ldap-server";

import "LdapServer";
import "LdapDatabase";
import "Report";
import "Label";
import "HTML";
import "String";

include "ldap-server/widgets.ycp";

/* forward declaration of the widget tree
*/
define map<string,map<string,any> > widget_map = nil;

/* error string, all callbacks return false and set this to an error description
 */
define string callback_error = "";

define list<map> widget_tree = nil;
/* this is set to true when the widget tree must be rebuilt, that is, when dynamic tree
 * items are added/removed
 */
define boolean rebuild_widget_tree = true;

/* command for input handlers, is set in the main UserInput loop in dialogs.ycp
 * --> pseudo function argument for input callbacks
 */
define symbol handler_cmd = nil;

/* current_tree_item, is set in main UserInput loop. The widget_map key of the currently
 * active tree item. Used by callbacks of dynamic items.
 * --> pseudo function argument for dynamic callbacks
 */
define string current_tree_item = "";

/*********************************
 **     callback handlers       **
 *********************************/

/*****************************
 ** default handlers
 *****************************/

define boolean cb_check_default()
``{
    y2milestone( "calling default check handler" );
    return true;
}

define boolean cb_read_default()
``{
    y2milestone( "calling default read handler" );
    return true;
}

define boolean cb_write_default()
``{
    y2milestone( "calling default write handler" );
    return true;
}

/*****************************
 ** global schema handlers
 *****************************/

void update_schemalist( list<string> l )
{
    if( l == nil ) l = [];
    //widget_map["g_schema","inclist"] = l;
    UI::ChangeWidget( `sb_schemalist, `Items, l );
    UI::ChangeWidget( `pb_delete, `Enabled, false );
}

define boolean cb_read_daemon()
``{
    y2milestone("calling read handler for item \"daemon\"");
    boolean enabled = LdapServer::ReadServiceEnabled();
    CWMFirewallInterfaces::OpenFirewallInit (fw_widget, "");
    if ( enabled )
    {
        UI::ChangeWidget( `rb_service_enable, `CurrentButton, `rb_yes );
    }
    else
    {
        UI::ChangeWidget( `rb_service_enable, `CurrentButton, `rb_no );
        UI::ChangeWidget( `fr_listener, `Enabled, false );
        UI::ChangeWidget( `fr_firewall, `Enabled, false );
    }
    if ( LdapServer::ReadProtocolListenerEnabled("ldap") )
    {
        UI::ChangeWidget( `cb_interface_ldap, `Value, true );
    }
    else
    {
        UI::ChangeWidget( `cb_interface_ldap, `Value, false );
    }
    if ( LdapServer::ReadProtocolListenerEnabled("ldaps") )
    {
        UI::ChangeWidget( `cb_interface_ldaps, `Value, true );
    }
    else
    {
        UI::ChangeWidget( `cb_interface_ldaps, `Value, false );
    }
    if ( LdapServer::ReadProtocolListenerEnabled("ldapi") )
    {
        UI::ChangeWidget( `cb_interface_ldapi, `Value, true );
    }
    else
    {
        UI::ChangeWidget( `cb_interface_ldapi, `Value, false );
    }
    return true;
}

define boolean cb_input_daemon()
``{
    y2milestone("calling input handler for item \"daemon\"");
    y2milestone("Handlercmd = %1", handler_cmd);

    if ( handler_cmd == `rb_no ) // service was just disabled
    {
        UI::ChangeWidget( `fr_listener, `Enabled, false );
        UI::ChangeWidget( `fr_firewall, `Enabled, false );
    }
    else if ( handler_cmd == `rb_yes ) // service was just disabled
    {
        UI::ChangeWidget( `fr_listener, `Enabled, true );
        UI::ChangeWidget( `fr_firewall, `Enabled, true );
    }

    return true;
}

define boolean cb_write_daemon()
``{
    y2milestone("calling write handler for item \"daemon\"");

    symbol serviceEnabled = (symbol)UI::QueryWidget(`id(`rb_service_enable), `CurrentButton);
    CWMFirewallInterfaces::OpenFirewallStore (fw_widget, "", $[]);
    if ( serviceEnabled == `rb_yes )
    {
        LdapServer::WriteServiceEnabled( true );
    }
    else
    {
        LdapServer::WriteServiceEnabled( false );
    }

    LdapServer::WriteProtocolListenerEnabled( "ldap", (boolean) UI::QueryWidget( `id( `cb_interface_ldap ), `Value ) );
    LdapServer::WriteProtocolListenerEnabled( "ldapi", (boolean) UI::QueryWidget( `id( `cb_interface_ldapi ), `Value ) );
    if ( (boolean) UI::QueryWidget( `id( `cb_interface_ldaps ), `Value ) )
    {
        map<string, any> tls = LdapServer::ReadTlsConfig();
        if ( (string)tls["caCertFile"]:"" != ""  &&
             (string)tls["certFile"]:"" != ""  &&
             (string)tls["certKeyFile"]:"" != "" )
        {
            LdapServer::WriteProtocolListenerEnabled( "ldaps", true );
        }
        else
        {
            if ( Popup::YesNoHeadline( _("Your TLS/SSL Configuration seems to be incomplete."),
                    _("Do you really want to enable the \"ldaps\" protocol listener?") ) )
            {
                LdapServer::WriteProtocolListenerEnabled( "ldaps", true );
            }
            else
            {
                LdapServer::WriteProtocolListenerEnabled( "ldaps", false );
            }
        }
    }
    else
    {
        LdapServer::WriteProtocolListenerEnabled( "ldaps", false );
    }
    return true;
}

define boolean cb_read_schema()
``{
    y2milestone( "calling schema read handler" );
    list<string> inclist = LdapServer::ReadSchemaList();
    update_schemalist( inclist );
    return true;
}

define boolean cb_input_schema()
``{
    y2milestone( "calling schema input handler" );


    list<string> inclist = LdapServer::ReadSchemaList();
    string current_item = (string)UI::QueryWidget( `sb_schemalist, `CurrentItem );
    y2milestone( "current_item is '%1'", current_item );

    if( handler_cmd == `pb_add )
    {
        //add a new file to the list
                /* file dialog heading */
        string new_item = UI::AskForExistingFile( "/etc/openldap/schema/", "*.ldif *", _("Select New Schema File") );

        if( new_item == nil ) return true;

        if( contains( inclist, new_item ) )
        {
                /* error popup */
            callback_error = _("The schema file is already in the list.");
            return false;
        }
        if ( regexpmatch( new_item, ".*\.schema$" ) ) 
        {
            if (! LdapServer::AddSchemaToSchemaList(new_item) ) {
                map<string, string> err = LdapServer::ReadError();
                callback_error = err["msg"]:"" + "\n" + err["details"]:"";
                return false;
            }
            list<string> inclist = LdapServer::ReadSchemaList();
            update_schemalist( inclist );
        }
        else if (! LdapServer::AddLdifToSchemaList(new_item) )
        {
            map<string, string> err = LdapServer::ReadError();
            callback_error = err["msg"]:"" + "\n" + err["details"]:"";
            return false;
        } else {
            list<string> inclist = LdapServer::ReadSchemaList();
            update_schemalist( inclist );
        }

    } else if( handler_cmd == `pb_delete )
    {
        if( current_item == nil ) return true;
        LdapServer::RemoveFromSchemaList(current_item);
        list<string> inclist = LdapServer::ReadSchemaList();
        update_schemalist( inclist );
    }
    return true;
}

/*****************************
 ** global loglevel handlers
 *****************************/

define boolean cb_check_loglevel()
``{
    return true;
}

define boolean cb_read_loglevel()
``{
    y2milestone( "calling loglevel read handler" );
    list<string> lvls = LdapServer::ReadLogLevels();

    UI::ChangeWidget( `msb_loglevel, `SelectedItems, lvls );
    return true;
}

define boolean cb_write_loglevel()
``{
    y2milestone( "calling loglevel write handler" );
    list<string> idlist = (list<string>)UI::QueryWidget( `msb_loglevel, `SelectedItems );

    y2milestone( "writing loglevel: '%1'", idlist );
    return LdapServer::WriteLogLevels( idlist );
}

/*****************************
 ** global allow handlers
 *****************************/

define boolean cb_check_allow()
``{
    return true;
}

define boolean cb_read_allow()
``{
    y2milestone( "calling allow read handler" );
    list<string> allowlist = LdapServer::ReadAllowFeatures();
    list<string> disallowlist = LdapServer::ReadDisallowFeatures();
    UI::ChangeWidget( `msb_allow, `SelectedItems, allowlist );
    UI::ChangeWidget( `msb_disallow, `SelectedItems, disallowlist );
    return true;
}

define boolean cb_write_allow()
``{
    y2milestone( "calling allow write handler" );
    list<string> allowlist = [];
    list<string> disallowlist = [];
    allowlist = (list<string>)UI::QueryWidget( `msb_allow, `SelectedItems );
    disallowlist = (list<string>)UI::QueryWidget( `msb_disallow, `SelectedItems );

    y2milestone( "writing allowlist: '%1'", allowlist );
    LdapServer::WriteAllowFeatures( allowlist );
    LdapServer::WriteDisallowFeatures( disallowlist );
    return true;
}

/*****************************
 ** tls handlers
 *****************************/

define boolean cb_read_tls()
``{
    y2milestone( "calling tls read handler" );
    map<string, any> tls = LdapServer::ReadTlsConfig();
    y2milestone( "tls config %1", tls );
    if ( (string)tls["caCertFile"]:"" != ""  &&
         (string)tls["certFile"]:"" != ""  &&
         (string)tls["certKeyFile"]:"" != "" )
    {
        UI::ChangeWidget( `cb_tls_enabled, `Value, true );
        UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, true );

        if ( (string)tls["caCertFile"]:"" == "/etc/ssl/certs/YaST-CA.pem"  &&
             (string)tls["certFile"]:"" == "/etc/ssl/servercerts/servercert.pem"  &&
             (string)tls["certKeyFile"]:"" == "/etc/ssl/servercerts/serverkey.pem" )
        {
            UI::ChangeWidget( `cb_use_common_cert, `Value, true );
            UI::ChangeWidget( `fr_import_cert , `Enabled, false );
        } else {
            UI::ChangeWidget( `cb_use_common_cert, `Value, false );
            UI::ChangeWidget( `fr_import_cert , `Enabled, true );
        }
    }
    else
    {
        UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, false );
        UI::ChangeWidget( `cb_use_common_cert, `Enabled, false );
        UI::ChangeWidget( `fr_import_cert, `Enabled, false );
    }
    UI::ChangeWidget( `cb_ssl_listener_enabled, `Value, LdapServer::ReadProtocolListenerEnabled("ldaps") );
    UI::ChangeWidget( `te_ca_file, `Value, tls["caCertFile"]:"" );
    UI::ChangeWidget( `te_cert_file, `Value, tls["certFile"]:"" );
    UI::ChangeWidget( `te_key_file, `Value, tls["certKeyFile"]:"" );

    return true;
}

define boolean cb_write_tls()
``{
    y2milestone( "calling tls write handler" );
    boolean tls_active = (boolean)UI::QueryWidget( `cb_tls_enabled, `Value );
    if( tls_active == true )
    {
        string cafile = (string)UI::QueryWidget( `te_ca_file, `Value );

        map<string,any> tlsSettings = $[
                "certKeyFile" : (string)UI::QueryWidget( `te_key_file, `Value ),
                "certFile"    : (string)UI::QueryWidget( `te_cert_file, `Value ),
                "caCertFile"  : (string)UI::QueryWidget( `te_ca_file, `Value ),
                "caCertDir"  : "",
                "crlFile"    : "",
                "crlCheck"   : 0,
                "verifyClient" : 0,
                "tls_active" : true
            ];
        if ( (string)tlsSettings["caCertFile"]:"" == "" )
        {
            callback_error = _("Please select a valid CA Certificate File");
            return false;
        }
        if ( (string)tlsSettings["certFile"]:"" == "" )
        {
            callback_error = _("Please select a valid Certificate File");
            return false;
        }
        if ( (string)tlsSettings["certKeyFile"]:"" == "" )
        {
            callback_error = _("Please select a valid Certificate Key File");
            return false;
        }
        if ( ! LdapServer::WriteTlsConfig( tlsSettings ) )
        {
            map<string, string> err = LdapServer::ReadError();
            callback_error = err["msg"]:"" + err["details"]:"";
            return false;
        }
        LdapServer::WriteProtocolListenerEnabled( "ldaps", (boolean) UI::QueryWidget( `id( `cb_ssl_listener_enabled ), `Value ) );
    }
    else
    {
        map<string,any> tlsSettings = $[
                "tls_active"  : false,
                "certKeyFile" : "",
                "certFile"    : "",
                "caCertFile"  : "",
                "caCertDir"  : "",
                "crlFile"    : "",
                "crlCheck"   : 0,
                "verifyClient" : 0
            ];

        LdapServer::WriteTlsConfig( tlsSettings );
        LdapServer::WriteProtocolListenerEnabled( "ldaps", false );
    }
    return true;
}

define boolean cb_input_tls()
``{
    y2milestone( "calling tls input handler" );

    boolean common_cert_available = LdapServer::HaveCommonServerCertificate();

    if( handler_cmd == `cb_tls_enabled )
    {
        boolean tls_enabled_cb = (boolean)UI::QueryWidget( `cb_tls_enabled, `Value );
        if ( tls_enabled_cb )
        {
            UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, true );
            UI::ChangeWidget( `cb_ssl_listener_enabled, `Value, true );
            if ( common_cert_available )
            {
                UI::ChangeWidget( `cb_use_common_cert, `Enabled, true );
                UI::ChangeWidget( `cb_use_common_cert, `Value, true );
                UI::ChangeWidget( `te_ca_file, `Value, "/etc/ssl/certs/YaST-CA.pem");
                UI::ChangeWidget( `te_cert_file, `Value, "/etc/ssl/servercerts/servercert.pem");
                UI::ChangeWidget( `te_key_file, `Value, "/etc/ssl/servercerts/serverkey.pem");
                UI::ChangeWidget( `fr_import_cert, `Enabled, false );
            } else {
                UI::ChangeWidget( `fr_import_cert, `Enabled, true );
            }

        } else {
            UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, false );
            UI::ChangeWidget( `cb_use_common_cert, `Enabled, false );
            UI::ChangeWidget( `fr_import_cert, `Enabled, false );
        }
    }
    else if( handler_cmd == `cb_use_common_cert )
    {
        boolean use_common_cert = (boolean)UI::QueryWidget( `cb_use_common_cert, `Value );
        if ( use_common_cert )
        {
            if ( common_cert_available )
            {
                UI::ChangeWidget( `te_ca_file, `Value, "/etc/ssl/certs/YaST-CA.pem");
                UI::ChangeWidget( `te_cert_file, `Value, "/etc/ssl/servercerts/servercert.pem");
                UI::ChangeWidget( `te_key_file, `Value, "/etc/ssl/servercerts/serverkey.pem");
                UI::ChangeWidget( `fr_import_cert, `Enabled, false );
            } else {
                Popup::Error( _("A common server certificate is not available") );
                UI::ChangeWidget( `cb_use_common_cert, `Value, false );
                UI::ChangeWidget( `cb_use_common_cert, `Enabled, false );
            }
        } else {
            UI::ChangeWidget( `fr_import_cert, `Enabled, true );
        }
    }
    else if( handler_cmd == `pb_ca_file )
    {
                                                /* file selection headline */
        string name = UI::AskForExistingFile( "/etc/ssl/certs", "*.pem *.crt *", _("Select CA Certificate File") );
        if( name != nil ) UI::ChangeWidget( `te_ca_file, `Value, name );
    }
    else if( handler_cmd == `pb_cert_file )
    {
                                                /* file selection headline */
        string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select Certificate File") );
        if( name != nil ) UI::ChangeWidget( `te_cert_file, `Value, name );
    }
    else if( handler_cmd == `pb_key_file )
    {
                                                /* file selection headline */
        string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select Certificate Key File") );
        if( name != nil ) UI::ChangeWidget( `te_key_file, `Value, name );
    }
    else if( handler_cmd == `pb_launch_ca )
    {
        WFM::CallFunction("ca_mgm", [] );
        cb_read_tls();
    }
    //reread tls page
    return true;
}

/*****************************************
 ** handlers for database parent widget
 *****************************************/

define boolean cb_check_databases()
``{
    return true;
}

define boolean cb_read_databases()
``{
    y2milestone( "calling databases read handler" );
    list<map<string,string> > dblist = LdapServer::ReadDatabaseList();
    string text = HTML::Para( HTML::Bold( _("Available Databases:") ) )+HTML::Newline();
    foreach( map<string,string> db, dblist, {
        string tmp = sformat("%1 (%2)", db["suffix"]:"", db["type"]:"" );
        text = text + tmp + HTML::Newline();
    } );
    UI::ChangeWidget( `rt_databases, `Value, text );
    return true;
}

define boolean cb_write_databases()
``{
    return true;
}

define boolean cb_input_databases()
``{
    y2milestone( "calling databases input handler" );
    if( handler_cmd == `pb_add )
    {
        any ret = nil;
        ret = LdapDatabase::AddDbWizard();
        y2milestone( "Database wizard returned %1", ret );
        if (ret == `next )
        {
            rebuild_widget_tree = true;
            map <string,any> newDb = LdapDatabase::GetDatabase();
            if ( ! LdapServer::AddDatabase(0, newDb, LdapDatabase::GetCreateDir() ) )
            {
                map<string, string> err = LdapServer::ReadError();
                callback_error = err["msg"]:"" + "\n" + err["details"]:"";
                return false;
            }
            map <string,any> ppolicy = LdapDatabase::GetPpolicy();
            if ( size(ppolicy) > 0 )
            {
                list<map<string,string> > dblist = LdapServer::ReadDatabaseList();
                integer dbindex=0;
                foreach( map<string,string> db, dblist, {
                    if (db["suffix"]:"" == newDb["suffix"]:"" )
                    {
                        dbindex=tointeger(db["index"]:"0");
                        break;
                    }
                });
                if (dbindex > 0)
                {
                    if ( ! LdapServer::AddPasswordPolicy( dbindex, ppolicy ) )
                    {
                        map<string, string> err = LdapServer::ReadError();
                        callback_error = err["msg"]:"" + "\n" + err["details"]:"";
                        return false;
                    }
                }
            }
            LdapServer::WriteLdapConfBase( LdapDatabase::GetLdapConfBase() );
        }
        else
        {
            y2milestone( "Database creating aborted" );
        }
    }

    return true;
}

/*****************************
 ** database handlers
 *****************************/

define boolean cb_write_db()
``{
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    y2milestone( "calling db write handler for '%1'", current_tree_item );

    if( index == nil )
    {
                    /* Error Popup */
        callback_error = _("Unable to write settings for the current database.");
        y2error( "'name' entry for item '%1' is nil", current_tree_item );
        return false;
    }

    map<string,any> db = $[];
    db["rootdn"] = (string)UI::QueryWidget( `te_rootdn, `Value );

    if( db["rootdn"]:"" != "" && (boolean)UI::QueryWidget( `cb_append_basedn, `Value ) )
    {
        map<string,any> olddb = LdapServer::ReadDatabase(index);
        string suffix =  olddb["suffix"]:"";
        db["rootdn"] = db["rootdn"]:"" + "," + suffix;
    }
    db["entrycache"] = (integer)UI::QueryWidget( `if_entrycache, `Value );
    db["idlcache"] = (integer)UI::QueryWidget( `if_idlcache, `Value );
    integer kbytes = (integer)UI::QueryWidget( `if_checkpoint_kb, `Value );
    integer min = (integer)UI::QueryWidget( `if_checkpoint_min, `Value );
    list<integer> checkpoint = [ kbytes, min ];
    db["checkpoint"] = checkpoint;
    y2milestone( "updated Database: %1", db );

    boolean res = LdapServer::UpdateDatabase( index, db);


    return true;
}

define boolean cb_read_db()
``{
    y2milestone("cb_read_db current item: %1", current_tree_item);
    integer index = (integer) widget_map[current_tree_item, "index"]:nil;

    if ( index == nil )
    {
        callback_error = _("Unable to read settings for the current database.");
        y2error( "'index' entry for item '%1' is nil", current_tree_item );
        return false;
    }

    map<string, any> db = LdapServer::ReadDatabase( index );

    UI::ChangeWidget( `te_basedn, `Value, db["suffix"]:"" );

    string rootdn = db["rootdn"]:"";
    boolean append_checked = false;
    integer pos = search( rootdn, db["suffix"]:"" );
    if( pos > -1 )
    {
        string chkSuffix = substring( rootdn, pos );
        if (chkSuffix == db["suffix"]:"")
        {
            rootdn = substring( rootdn, 0, pos-1 );
            append_checked = true;
        }
    }
    UI::ChangeWidget( `te_rootdn, `Value, rootdn );
    UI::ChangeWidget( `cb_append_basedn, `Value, append_checked );
    UI::ChangeWidget( `if_entrycache, `Value, tointeger( (string)db["entrycache"]:"" ) );
    UI::ChangeWidget( `if_idlcache, `Value, tointeger( (string)db["idlcache"]:"" ) );
    list checkpoint = db["checkpoint"]:[];
    UI::ChangeWidget( `if_checkpoint_kb, `Value, tointeger( (string)checkpoint[0]:"" ) );
    UI::ChangeWidget( `if_checkpoint_min, `Value, tointeger( (string)checkpoint[1]:"" ) );

    return true;
}

define boolean cb_input_db()
``{
    string treeItem = current_tree_item;
    y2milestone( "calling db input handler for item '%1'", treeItem );
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    if ( handler_cmd == `pb_changepw ) {
        map<string,string> newpw = ChangeAdminPassword();
        if ( newpw != nil )
        {
            y2milestone("set password");
            string newhash = LdapServer::HashPassword(newpw["hashAlgo"]:"", newpw["password"]:"");
            y2milestone("new hash: %1", newhash );
            LdapServer::UpdateDatabase( index, $[ "rootpw" : newhash] );
        }
        else
        {
            y2milestone("password change cancelled");
        }
    }

    return true;
}

define boolean cb_read_bdb_index()
{
    integer index = (integer) widget_map[current_tree_item, "index"]:nil;
    y2milestone("cb_read_bdb_index current item: %1, index %2", current_tree_item, index);
    map<string, map<string, boolean> > idxMap = LdapServer::ReadDatabaseIndexes( index );
    integer i=0;
    list newItems = [];
    foreach( string attr, map<string, boolean> idx, idxMap, {
        string eqIdx = _("No");
        string presIdx  = _("No");
        string substrIdx = _("No");
        string approxIdx = _("No");
        y2milestone("index attr: %1", attr);
        if ( idx["eq"]:false )
        {
            eqIdx = _("Yes");
        }
        if ( idx["pres"]:false )
        {
            presIdx = _("Yes");
        }
        if ( idx["sub"]:false )
        {
            substrIdx = _("Yes");
        }
        newItems = add( newItems, `item( `id(i), attr, presIdx, eqIdx, substrIdx, approxIdx ) );
        i = i+1;
    } );
    UI::ChangeWidget( `tab_idx, `Items , newItems );

    return true;
}

define boolean cb_input_bdb_index()
{
    y2milestone("cb_input_bdb_index, handlercmd: %1", handler_cmd);
    integer index = (integer) widget_map[current_tree_item, "index"]:nil;
    if ( handler_cmd == `pb_idx_add || handler_cmd == `pb_idx_edit )
    {
        list<string> skip = [];
        string editAttr = "";
        map<string, boolean> idx = $[];
        map<string, map<string, boolean> > idxMap = LdapServer::ReadDatabaseIndexes( index );
        if (handler_cmd == `pb_idx_add ) {
            // skip attribute that already have an index defined
            foreach( string attr, map<string, boolean> idx, idxMap,
                {
                    skip = add( skip, attr );
                }
            );
        } else {
            any current_item_id = UI::QueryWidget(`tab_idx, `CurrentItem );
            editAttr = (string)UI::QueryWidget(`tab_idx, `Cell( current_item_id, 0 ) );
            idx = idxMap[editAttr]:$[];
            y2milestone("Selected Attr: %1 %2 %3", current_item_id, editAttr, idx );
        }

        map<string, any> newIdx = DatabaseIndexPopup(skip, editAttr, idx);
        if ( size(newIdx) > 0 )
        {
            LdapServer::ChangeDatabaseIndex( index, newIdx );
            cb_read_bdb_index();
        }
    }
    else if ( handler_cmd == `pb_idx_del )
    {
        any current_item_id = UI::QueryWidget(`tab_idx, `CurrentItem );
        string editAttr = (string)UI::QueryWidget(`tab_idx, `Cell( current_item_id, 0 ) );
        y2milestone("Selected Attr: %1 %2", current_item_id, editAttr );
        map<string, any> delIdx = $[];
        delIdx["name"] = editAttr;
        delIdx["sub"] = false;
        delIdx["pres"] = false;
        delIdx["eq"] = false;
        LdapServer::ChangeDatabaseIndex( index, delIdx );
        cb_read_bdb_index();
    }
    return true;
}

define boolean cb_read_acl()
{
    y2milestone("cb_read_acl()");
    string treeItem = current_tree_item;
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    list<map> acllist = LdapServer::ReadDatabaseAcl( index );

    return LdapDatabase::DbAclRead( index, acllist );
}

define boolean cb_input_acl()
{
    y2milestone("cb_input_acl()");
    string treeItem = current_tree_item;
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    y2milestone( "calling acl input handler for item '%1'", treeItem );
    return LdapDatabase::DbAclInput( handler_cmd, index );
}

define boolean cb_write_acl()
{
    y2milestone("cb_write_acl()");
    string treeItem = current_tree_item;
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    list<map> changedAcls = LdapDatabase::DbAclWrite( index );
    if ( changedAcls == nil )
    {
        return true;
    }
    return LdapServer::ChangeDatabaseAcl( index, (list<map<string,any> >)changedAcls );
}

define boolean cb_input_ppolicy()
{
    y2milestone("cb_input_ppolicy()");
    string treeItem = current_tree_item;
    y2milestone( "calling db input handler for item '%1'", treeItem );
    return LdapDatabase::DbPpolicyInput( handler_cmd );
}

define boolean cb_read_ppolicy()
{
    y2milestone("cb_read_ppolicy()");
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    return LdapDatabase::DbPpolicyRead( index );
}

define boolean cb_write_ppolicy()
{
    string treeItem = current_tree_item;
    y2milestone("cb_write_policy() treeitem: '%1'", treeItem);
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    boolean result = true;
    map<string,any> ppolicy = LdapDatabase::DbPpolicyWrite(index);
    if ( size(ppolicy) > 0 )
    {
        result = LdapServer::AddPasswordPolicy( index, ppolicy );
    }
    else
    {
        map<string,any> ppolicy_old = LdapServer::ReadPpolicyOverlay(index);
        if ( size(ppolicy_old) > 0 )
        {
            // delete ppolicy
            result = LdapServer::AddPasswordPolicy( index, $[] );
        }
    }
    if ( ! result ) {
        map<string, string> err = LdapServer::ReadError();
        callback_error = err["msg"]:"" + "\n" + err["details"]:"";
    }
    return result;
}


/*****************************************
 **     tree structure definition       **
 *****************************************/
widget_map = $[
    "base"  : $[
        "children"  : [ "daemon", "global", "schema" , "databases" ]
    ],
    "daemon" : $[
        "name"      : _("Startup Configuration"),
        "widget"    : dlg_service,
        "cb_read"   : ``( cb_read_daemon() ),
        "cb_input"  : ``( cb_input_daemon() ),
        "cb_write"  : ``( cb_write_daemon() )
    ],
    "global" : $[
        "children"  : [ "g_loglevel", "g_allow", "g_tls" ],
                    /* Tree item */
        "name"      : _("Global Settings"),
        "widget"    : `Empty()
    ],
    "schema" : $[
                    /* Tree item */
        "name"      : _("Schema Files"),
        "widget"    : schemaWidget,
        "inclist"   : [],
        "cb_read"   : ``( cb_read_schema() ),
        "cb_input"  : ``( cb_input_schema() )
    ],
    "g_loglevel" : $[
                    /* Tree item */
        "name"      : _("Log Level Settings"),
        "widget"    : loglevelWidget,
        "cb_check"  : ``( cb_check_loglevel() ),
        "cb_read"   : ``( cb_read_loglevel() ),
        "cb_write"  : ``( cb_write_loglevel() )
    ],
    "g_allow" : $[
                    /* Tree item */
        "name"      : _("Allow/Disallow Features"),
        "widget"    : allowWidget,
        "cb_check"  : ``( cb_check_allow() ),
        "cb_read"   : ``( cb_read_allow() ),
        "cb_write"  : ``( cb_write_allow() )
    ],
    "g_tls" : $[
                    /* Tree item */
        "name"      : _("TLS Settings"),
        "widget"    : tlsWidget,
        "cb_read"   : ``( cb_read_tls() ),
        "cb_write"  : ``( cb_write_tls() ),
        "cb_input"  : ``( cb_input_tls() )
    ],
    "databases": $[
                    /* Tree item */
        "name"      : _("Databases"),
        "widget"    : `VBox(
            `RichText( `id( `rt_databases ), "" ),
                                         /* Button Text */
            `PushButton( `id( `pb_add ), _("A&dd Database...") )
        ),
        "cb_check"  : ``( cb_check_databases() ),
        "cb_read"   : ``( cb_read_databases() ),
        "cb_write"  : ``( cb_write_databases() ),
        "cb_input"  : ``( cb_input_databases() )
    ]
];

/*****************************************
 *      tree generation functions       **
 *****************************************/

void addDatabaseWidgetMap( string type, string label, string item_name, integer index, boolean new_db )
{
    if( haskey( widget_map, item_name ) ) return;
    map<string, any> dbIndex = $[
        "name"      : _("Index Configuration"),
        "widget"    : editBdbIndexes,
        "index"     : index,
        "cb_read"   : ``(cb_read_bdb_index() ),
        "cb_input"  : ``(cb_input_bdb_index() )
    ];
    map<string, any> dbPpolicy = $[
        "name"      : _("Password Policy Configuration"),
        "widget"    : LdapDatabase::GetPpolicyWidget(),
        "index"     : index,
        "cb_read"   : ``(cb_read_ppolicy() ),
        "cb_input"  : ``(cb_input_ppolicy() ),
        "cb_write"  : ``(cb_write_ppolicy() )
    ];
    map<string, any> dbAcl = $[
        "name"      : _("Access Control Configuration"),
        "widget"    : LdapDatabase::GetAclWidget(),
        "index"     : index,
        "cb_read"   : ``(cb_read_acl() ),
        "cb_write"   : ``(cb_write_acl() ),
        "cb_input"  : ``(cb_input_acl() )
    ];
    map<string,any> item_map = $[
        "name"      : label,
        "index"     : index,
        "widget"    : editGenericDatabase,
        "new_db"    : new_db,
        "dynamic"   : true,
        "help_page" : "database_detail",
    ];
    map<string,any> bdb_item_map = $[
        "name"      : label,
        "children"  : [ item_name + "_index", item_name + "_ppolicy", item_name + "_acl"],
        "index"     : index,
        "widget"    : editBdbDatabase,
        "new_db"    : new_db,
        "dynamic"   : true,
        "help_page" : "database_detail",
        "cb_read"   : ``( cb_read_db() ),
        "cb_write"  : ``( cb_write_db() ),
        "cb_input"  : ``( cb_input_db() )
    ];
    y2milestone( "adding database item '%1' as '%2'", label, item_name );

    if ( type == "bdb" || type == "hdb" )
    {
        widget_map[item_name] = bdb_item_map;
        widget_map[item_name + "_index"] = dbIndex;
        widget_map[item_name + "_ppolicy"] = dbPpolicy;
        widget_map[item_name + "_acl"] = dbAcl;
    }
    else
    {
        widget_map[item_name] = item_map;
    }

    widget_map["databases","children"] = add( widget_map["databases","children"]:[], item_name );
}

void generateDynamicTreeItems()
{
    y2debug( "generating database tree items" );
    //generate database entries

    list<map<string,string> > dblist = LdapServer::ReadDatabaseList();
    integer i = 0;
    foreach( map<string,string> db, dblist, {
        string tmp = sformat("%1 (%2)", db["suffix"]:"", db["type"]:"" );
        string name = "database-" + tostring(i);
        addDatabaseWidgetMap( db["type"]:"", tmp , name, tointeger(db["index"]:"0"),  false );
        i = i+1;
    } );
    y2debug( "databases map is '%1'", (map<string,any>)widget_map["databases"]:$[] );
}

void deleteDynamicTreeItems()
{
    y2milestone( "deleting dynamic tree items" );
    widget_map = filter( string key, map<string,any> val, widget_map, {
        return( !(boolean)val["dynamic"]:false );
    } );

    widget_map["databases","children"] = [];
}

}
