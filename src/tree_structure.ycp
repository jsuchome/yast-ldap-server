/**
 * File:	include/ldap-server/tree_structure.ycp
 * Package:	Configuration of ldap-server
 * Summary:	Widget Tree structure
 * Authors:	Andreas Bauer <abauer@suse.de>
 *
 * $Id$
 */
{
textdomain "ldap-server";

import "LdapServer";
import "Report";
import "Label";
import "HTML";
import "String";

include "ldap-server/widgets.ycp";

/* forward declaration of the widget tree
*/
define map<string,map<string,any> > widget_map = nil;

/* error string, all callbacks return false and set this to an error description
 */
define string callback_error = "";

define list<map> widget_tree = nil;
/* this is set to true when the widget tree must be rebuilt, that is, when dynamic tree
 * items are added/removed
 */
define boolean rebuild_widget_tree = true;

/* command for input handlers, is set in the main UserInput loop in dialogs.ycp
 * --> pseudo function argument for input callbacks
 */
define symbol handler_cmd = nil;

/* current_tree_item, is set in main UserInput loop. The widget_map key of the currently
 * active tree item. Used by callbacks of dynamic items.
 * --> pseudo function argument for dynamic callbacks
 */
define string current_tree_item = "";

//define void addDatabaseWidgetMap( string suffix, string item_map, integer index, boolean new_db );

/*********************************
 **     callback handlers       **
 *********************************/

/*****************************
 ** default handlers
 *****************************/

define boolean cb_check_default()
``{
    y2milestone( "calling default check handler" );
    return true;
}

define boolean cb_read_default()
``{
    y2milestone( "calling default read handler" );
    return true;
}

define boolean cb_write_default()
``{
    y2milestone( "calling default write handler" );
    return true;
}

/*****************************
 ** global schema handlers
 *****************************/

void update_schemalist( list<string> l, string select_item )
{
    if( l == nil ) l = [];
    //widget_map["g_schema","inclist"] = l;
    UI::ChangeWidget( `sb_schemalist, `Items, l );
    if( select_item != nil )
    {
        UI::ChangeWidget( `sb_schemalist, `CurrentItem, select_item );
    }
}

define boolean cb_read_schema()
``{
    y2milestone( "calling schema read handler" );
    list<string> inclist = LdapServer::GetSchemaList();
//    //store current include list for later order changes
    update_schemalist( inclist, nil );
    return true;
}

define boolean cb_check_schema()
``{
    y2milestone( "calling schema check handler" );
    //dummy check strings
        /* error popup */
    string invalid_schema = sformat( _("The file '%1' is not a schema file."), "dummy" );
    return true;
}

define boolean cb_write_schema()
``{
    y2milestone( "calling schema write handler" );
//    LdapServer::WriteSchemaIncludeList( (list<string>)widget_map["g_schema","inclist"]:[] );
    return true;
}

integer find_pos( list<string> l, string s )
{
    y2debug( "-------------- starting find_pos ----------------" );
    y2debug( "searching in list '%1'", l );
    y2debug( "for string '%1'", s );
    y2debug( "size( l ) is '%1'", size( l ) );
    if( size( l ) == 0 ) return -1;
    integer i = 0;
    integer ret = -1;
    foreach( string str, l, {
        y2debug( "comparing str '%1' with s '%2'", str, s );
        y2debug( "current position is '%1'", i );
        if( str == s ) ret = i;
        i = i + 1;
    } );
    return ret;
}

define boolean cb_input_schema()
``{
    y2milestone( "calling schema input handler" );


    list<string> inclist = LdapServer::GetSchemaList();
    string current_item = (string)UI::QueryWidget( `sb_schemalist, `CurrentItem );
    y2milestone( "current_item is '%1'", current_item );

    if( handler_cmd == `pb_add )
    {
        //add a new file to the list
                /* file dialog heading */
        string new_item = UI::AskForExistingFile( "/etc/openldap/schema/", "*.ldif *", _("Select New Schema File") );

        if( new_item == nil ) return true;

        if( contains( inclist, new_item ) )
        {
                /* error popup */
            callback_error = _("The schema file is already in the list.");
            return false;
        }

        LdapServer::AddLdifToSchemaList(new_item);
        list<string> inclist = LdapServer::GetSchemaList();
        update_schemalist( inclist, new_item );

    } else if( handler_cmd == `pb_delete )
    {
        if( current_item == nil ) return true;
//        inclist = remove( inclist, find_pos( inclist, current_item ) );
        list<string> inclist = LdapServer::GetSchemaList();
        update_schemalist( inclist, nil );
    }
    return true;
}

/*****************************
 ** global loglevel handlers
 *****************************/

define boolean cb_check_loglevel()
``{
    return true;
}

define boolean cb_read_loglevel()
``{
    y2milestone( "calling loglevel read handler" );
    list<string> lvls = LdapServer::GetLogLevels();

    UI::ChangeWidget( `msb_loglevel, `SelectedItems, lvls );
    return true;
}

define boolean cb_write_loglevel()
``{
    y2milestone( "calling loglevel write handler" );
    list<string> idlist = (list<string>)UI::QueryWidget( `msb_loglevel, `SelectedItems );

    y2milestone( "writing loglevel: '%1'", idlist );
    return LdapServer::SetLogLevels( idlist );
}

/*****************************
 ** global allow handlers
 *****************************/

define boolean cb_check_allow()
``{
    return true;
}

define boolean cb_read_allow()
``{
    y2milestone( "calling allow read handler" );
    list<string> allowlist = LdapServer::GetAllowFeatures();
    list<string> disallowlist = LdapServer::GetDisallowFeatures();
    UI::ChangeWidget( `msb_allow, `SelectedItems, allowlist );
    UI::ChangeWidget( `msb_disallow, `SelectedItems, disallowlist );
    return true;
}

define boolean cb_write_allow()
``{
    y2milestone( "calling allow write handler" );
    list<string> allowlist = [];
    list<string> disallowlist = [];
    allowlist = (list<string>)UI::QueryWidget( `msb_allow, `SelectedItems );
    disallowlist = (list<string>)UI::QueryWidget( `msb_disallow, `SelectedItems );

    y2milestone( "writing allowlist: '%1'", allowlist );
    LdapServer::SetAllowFeatures( allowlist );
    LdapServer::SetDisallowFeatures( disallowlist );
    return true;
}

/*****************************
 ** tls handlers
 *****************************/

define boolean cb_check_tls()
``{
    y2milestone( "calling tls check handler" );

//    map<string,string> importPaths = LdapServer::ReadImportCertificates();
//    boolean use_common_ca = LdapServer::ReadConfigureCommonServerCertificate();
//    map<string,string> tlsSettings = (map<string,string>)LdapServer::ReadTlsSettings();
//
//    if( (boolean)UI::QueryWidget( `rb_yes, `Value ) && !(
//            haskey( importPaths, "ServerCertificateFile" ) ||
//            use_common_ca ||
//            ( tlsSettings["TLSCertificateFile"]:nil != nil  && tlsSettings["TLSCertificateKeyFile"]:nil != nil ) )
//       )
//    {
//            /*error popup*/
//        callback_error = _("Choose a certificate if you want to activate TLS.");
//        return false;
//    }

    return true;
}

define boolean cb_read_tls()
``{
    y2milestone( "calling tls read handler" );
    map<string, any> tls = LdapServer::GetTlsConfig();
    y2milestone( "tls config %1", tls );
    if ( (string)tls["caCertFile"]:"" != ""  &&
         (string)tls["certFile"]:"" != ""  &&
         (string)tls["certKeyFile"]:"" != "" )
    {
        UI::ChangeWidget( `cb_tls_enabled, `Value, true );
        UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, true );

        if ( (string)tls["caCertFile"]:"" == "/etc/ssl/certs/YaST-CA.pem"  &&
             (string)tls["certFile"]:"" == "/etc/ssl/servercerts/servercert.pem"  &&
             (string)tls["certKeyFile"]:"" == "/etc/ssl/servercerts/serverkey.pem" )
        {
            UI::ChangeWidget( `cb_use_common_cert, `Value, true );
            UI::ChangeWidget( `fr_import_cert , `Enabled, false );
        } else {
            UI::ChangeWidget( `cb_use_common_cert, `Value, false );
            UI::ChangeWidget( `fr_import_cert , `Enabled, true );
        }
    }
    else
    {
        UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, false );
        UI::ChangeWidget( `cb_use_common_cert, `Enabled, false );
        UI::ChangeWidget( `fr_import_cert, `Enabled, false );
    }
    UI::ChangeWidget( `te_ca_file, `Value, tls["caCertFile"]:"" );
    UI::ChangeWidget( `te_cert_file, `Value, tls["certFile"]:"" );
    UI::ChangeWidget( `te_key_file, `Value, tls["certKeyFile"]:"" );

    return true;
}

define boolean cb_write_tls()
``{
    y2milestone( "calling tls write handler" );
    boolean tls_active = (boolean)UI::QueryWidget( `cb_tls_enabled, `Value );
    if( tls_active == true )
    {
        string cafile = (string)UI::QueryWidget( `te_ca_file, `Value );

        map<string,any> tlsSettings = $[
                "certKeyFile" : (string)UI::QueryWidget( `te_key_file, `Value ),
                "certFile"    : (string)UI::QueryWidget( `te_cert_file, `Value ),
                "caCertFile"  : (string)UI::QueryWidget( `te_ca_file, `Value ),
                "caCertDir"  : "",
                "crlFile"    : "",
                "crlCheck"   : 0,
                "verifyClient" : 0
            ];
        LdapServer::SetTlsConfig( tlsSettings );
    }
    else
    {
//        LdapServer::WriteConfigureCommonServerCertificate( false );
//        LdapServer::WriteImportCertificates( $[] );
        map<string,any> tlsSettings = $[
                "certKeyFile" : "",
                "certFile"    : "",
                "caCertFile"  : "",
                "caCertDir"  : "",
                "crlFile"    : "",
                "crlCheck"   : 0,
                "verifyClient" : 0
            ];

        LdapServer::SetTlsConfig( tlsSettings );
    }
    return true;
}

define boolean cb_input_tls()
``{
    y2milestone( "calling tls input handler" );

    boolean common_cert_available = LdapServer::HaveCommonServerCertificate();

    if( handler_cmd == `cb_tls_enabled )
    {
        boolean tls_enabled_cb = (boolean)UI::QueryWidget( `cb_tls_enabled, `Value );
        if ( tls_enabled_cb )
        {
            UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, true );
            if ( common_cert_available )
            {
                UI::ChangeWidget( `cb_use_common_cert, `Enabled, true );
                UI::ChangeWidget( `cb_use_common_cert, `Value, true );
                UI::ChangeWidget( `te_ca_file, `Value, "/etc/ssl/certs/YaST-CA.pem");
                UI::ChangeWidget( `te_cert_file, `Value, "/etc/ssl/servercerts/servercert.pem");
                UI::ChangeWidget( `te_key_file, `Value, "/etc/ssl/servercerts/serverkey.pem");
                UI::ChangeWidget( `fr_import_cert, `Enabled, false );
            } else {
                UI::ChangeWidget( `fr_import_cert, `Enabled, true );
            }

        } else {
            UI::ChangeWidget( `cb_ssl_listener_enabled, `Enabled, false );
            UI::ChangeWidget( `cb_use_common_cert, `Enabled, false );
            UI::ChangeWidget( `fr_import_cert, `Enabled, false );
        }
    }
    else if( handler_cmd == `cb_use_common_cert )
    {
        boolean use_common_cert = (boolean)UI::QueryWidget( `cb_use_common_cert, `Value );
        if ( use_common_cert )
        {
            if ( common_cert_available )
            {
                UI::ChangeWidget( `te_ca_file, `Value, "/etc/ssl/certs/YaST-CA.pem");
                UI::ChangeWidget( `te_cert_file, `Value, "/etc/ssl/servercerts/servercert.pem");
                UI::ChangeWidget( `te_key_file, `Value, "/etc/ssl/servercerts/serverkey.pem");
                UI::ChangeWidget( `fr_import_cert, `Enabled, false );
            } else {
                Popup::Error( _("A common server certificate is not available") );
                UI::ChangeWidget( `cb_use_common_cert, `Value, false );
                UI::ChangeWidget( `cb_use_common_cert, `Enabled, false );
            }
        } else {
            UI::ChangeWidget( `fr_import_cert, `Enabled, true );
        }
    }
    else if( handler_cmd == `pb_ca_file )
    {
                                                /* file selection headline */
        string name = UI::AskForExistingFile( "/etc/ssl/certs", "*.pem *.crt *", _("Select CA Certificate File") );
        if( name != nil ) UI::ChangeWidget( `te_ca_file, `Value, name );
    }
    else if( handler_cmd == `pb_cert_file )
    {
                                                /* file selection headline */
        string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select Certificate File") );
        if( name != nil ) UI::ChangeWidget( `te_cert_file, `Value, name );
    }
    else if( handler_cmd == `pb_key_file )
    {
                                                /* file selection headline */
        string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select Certificate Key File") );
        if( name != nil ) UI::ChangeWidget( `te_key_file, `Value, name );
    }
    else if( handler_cmd == `pb_edit )
    {
//        //show edit popup
        any ret = nil;
//        string dlg_name = common_ca_available ? "type" : "import";
//        term dlg = (term)widget_map["g_tls","dialogs",dlg_name]:nil;
//        if( dlg == nil )
//        {
//            callback_error = _("An internal error occurred. View the log file.");
//            y2error( "cb_input_tls: type dialog is not in widget map" );
//            return false;
//        }
//
//        UI::OpenDialog( dlg );
//
//        map<string,string> importPaths = LdapServer::ReadImportCertificates();
//        if( dlg_name == "input" )
//        {
//            UI::ChangeWidget( `te_cert_file, `Value, importPaths["ServerCertificateFile"]:"" );
//            UI::ChangeWidget( `te_key_file, `Value, importPaths["ServerKeyFile"]:"" );
//            UI::ChangeWidget( `te_ca_file, `Value, importPaths["CACertificatesFile"]:"" );
//        }
//
//        if( dlg_name == "type" && haskey( importPaths, "ServerCertificateFile" ) )
//        {
//            UI::ChangeWidget( `rb_common, `Value, false );
//            UI::ChangeWidget( `rb_import, `Value, true );
//        }
//
//        y2milestone( ">>>> entering cb_input_tls input loop..." );
//        while( true )
//        {
//            ret = UI::UserInput();
//            y2milestone( "cb_input_tls: dialog returns '%1'", ret );
//
//            if( dlg_name == "type" )
//            {
//                if( ret == `cancel ) break;
//                else if( ret == `ok )
//                {
//                    any do_what = UI::QueryWidget( `rbg_type, `CurrentButton );
//                    y2milestone( "cb_input_tls: do_what is '%1'", do_what );
//                    if( do_what == `rb_common )
//                    {
//                        //TODO: use common ca
//                        y2milestone( "cb_input_tls: using common server certificate" );
//                        LdapServer::WriteConfigureCommonServerCertificate( true );
//                        LdapServer::WriteImportCertificates( $[] );
//                        break;
//                    } else if( do_what == `rb_import )
//                    {
//                        UI::CloseDialog();
//                        dlg_name = "import";
//                        UI::OpenDialog( (term)widget_map["g_tls","dialogs","import"]:`Label(_("Dialog not found")));
//
//                        //fill textentries
//                        UI::ChangeWidget( `te_cert_file, `Value, importPaths["ServerCertificateFile"]:"" );
//                        UI::ChangeWidget( `te_key_file, `Value, importPaths["ServerKeyFile"]:"" );
//                        UI::ChangeWidget( `te_ca_file, `Value, importPaths["CACertificatesFile"]:"" );
//                        continue;
//                    }
//                }
//            } else if( dlg_name == "import" )
//            {
//                if( ret == `cancel ) break;
//                else if( ret == `pb_ca_file )
//                {
//                                                            /* file selection headline */
//                    string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select CA Certificate File") );
//                    if( name != nil ) UI::ChangeWidget( `te_ca_file, `Value, name );
//                    continue;
//                } else if( ret == `pb_cert_file )
//                {
//                                                            /* file selection headline */
//                    string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select Certificate File") );
//                    if( name != nil ) UI::ChangeWidget( `te_cert_file, `Value, name );
//                    continue;
//                } else if( ret == `pb_key_file )
//                {
//                                                            /* file selection headline */
//                    string name = UI::AskForExistingFile( "/var/lib/CAM", "*.pem *.crt *", _("Select Certificate Key File") );
//                    if( name != nil ) UI::ChangeWidget( `te_key_file, `Value, name );
//                    continue;
//                } else if( ret == `ok )
//                {
//                    //TODO: import ca
//                    //read values
//                    string cert_file = String::CutBlanks( (string)UI::QueryWidget( `te_cert_file, `Value ) );
//                    string key_file = String::CutBlanks( (string)UI::QueryWidget( `te_key_file, `Value ) );
//                    string ca_file = String::CutBlanks( (string)UI::QueryWidget( `te_ca_file, `Value ) );
//
//                    if( cert_file == "" )
//                    {
//                            /* Error Popup */
//                        Popup::Error( _("Server certificate file is required.") );
//                        continue;
//                    }
//
//                    if( key_file == "" )
//                    {
//                            /* Error Popup */
//                        Popup::Error( _("Server key file is required.") );
//                        continue;
//                    }
//
//                    importPaths["ServerCertificateFile"] = cert_file;
//                    importPaths["ServerKeyFile"] = key_file;
//                    if( ca_file != "" ) importPaths["CACertificatesFile"] = ca_file;
//
//                    y2milestone( "importing certificates" );
//                    LdapServer::WriteImportCertificates( importPaths );
//                    LdapServer::WriteConfigureCommonServerCertificate( false );
//
//                    break;
//                }
//            }
//        }
//        y2milestone( "<<<< leaving cb_input_tls input loop..." );
//
//        UI::CloseDialog();
//        eval( cb_read_tls() );
    }
    //reread tls page
    return true;
}

/*****************************************
 ** handlers for database parent widget
 *****************************************/

define boolean cb_check_databases()
``{
    return true;
}

define boolean cb_read_databases()
``{
    y2milestone( "calling databases read handler" );
    list<map<string,string> > dblist = LdapServer::GetDatabaseList();
    string text = HTML::Para( HTML::Bold( _("Available Databases:") ) )+HTML::Newline();
    foreach( map<string,string> db, dblist, {
        string tmp = sformat("%1 (%2)", db["suffix"]:"", db["type"]:"" );
        text = text + tmp + HTML::Newline();
    } );
    UI::ChangeWidget( `rt_databases, `Value, text );
    return true;
}

define boolean cb_write_databases()
``{
    return true;
}

define boolean cb_input_databases()
``{
    y2milestone( "calling databases input handler" );
//    if( handler_cmd == `pb_add )
//    {
//        any ret = nil;
//        boolean user_changed_dbdir = false;
//        list<string> dblist = LdapServer::ReadDbList();
//        integer numDbs = size(dblist);
//
//        UI::OpenDialog( (term)widget_map["databases","dialogs","adddb"]:`Label( _("Dialog not found") ) );
//
//        UI::ChangeWidget( `te_rootdn, `Value, "cn=Administrator" );
//        UI::ChangeWidget( `te_directory, `Value, "/var/lib/ldap/" );
//        UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
//        UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
//        UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
//        UI::ChangeWidget( `cb_pp_append_basedn ,`Enabled, false );
//        while( true )
//        {
//            ret = UI::UserInput();
//            y2milestone( "cb_input_databases: dialog returns '%1'", ret );
//            if( ret == `cancel ) break;
//            else if( ret == `pb_directory ) {
//                    /*directory selection dialog heading*/
//                string name = UI::AskForExistingDirectory( "/var/lib/ldap", _("Select Database Directory") );
//                if( name != nil ) UI::ChangeWidget( `te_directory, `Value, name );
//                continue;
//            }
//            else if ( ret == `te_directory ) {
//                user_changed_dbdir = true;
//            }
//            else if ( ret == `te_basedn ) {
//                if ( ( user_changed_dbdir != true ) && (numDbs > 0) ) {
//                    string suffix = String::CutBlanks( (string)UI::QueryWidget( `te_basedn, `Value ) );
//                    suffix = String::Replace(suffix, ",", "_");
//                    suffix = String::CutRegexMatch(suffix, "[^0-9a-zA-Z_=-]", true);
//                    string dbdir = "/var/lib/ldap/" + suffix;
//                    UI::ChangeWidget( `te_directory, `Value, dbdir );
//                }
//            }
//            else if ( ret == `cb_ppolicy_overlay ) {
//                if ( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ) {
//                    UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , true );
//                    UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , true );
//                    UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , true );
//                    UI::ChangeWidget( `cb_pp_append_basedn ,`Enabled, true );
//                } else {
//                    UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
//                    UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
//                    UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
//                    UI::ChangeWidget( `cb_pp_append_basedn ,`Enabled, false );
//                }
//            }
//            else if( ret == `ok ) {
//                //TODO: add database
//                string suffix = String::CutBlanks( (string)UI::QueryWidget( `te_basedn, `Value ) );
//                string rootdn = String::CutBlanks( (string)UI::QueryWidget( `te_rootdn, `Value ) );
//                string rootpw = (string)UI::QueryWidget( `te_rootpw, `Value );
//                string directory = String::CutBlanks( (string)UI::QueryWidget( `te_directory, `Value ) );
//                boolean createdir = false;
//                string cryptmethod = (string)UI::QueryWidget( `cb_cryptmethod, `Value );
//
//                //check values
//                if( suffix == "" )
//                {
//                        /*error popup*/
//                    Popup::Error( _("Base DN must be set.") );
//                    continue;
//                }
//
//                list<string> dblist = (list<string>)merge( LdapServer::ReadDbList(), LdapServer::ReadDbListNEW() );
//                if( contains( dblist, suffix ) )
//                {
//                    /* Error Popup */
//                    Popup::Error( _("A database with that Base DN already exists.") );
//                    continue;
//                }
//                if( rootpw != "" && rootdn == "" )
//                {
//                    /* Error Popup */
//                    Popup::Error( _("Root DN must be set if a password is given.") );
//                    continue;
//                }
//                if( rootpw != "" && rootpw != (string)UI::QueryWidget( `te_valid_rootpw, `Value ) )
//                {
//                    /* Error Popup */
//                    Popup::Error( _("Password validation failed.") );
//                    continue;
//                }
//                if( directory == "" )
//                {
//                    /* Error Popup */
//                    Popup::Error( _("A directory must be specified.") );
//                    continue;
//                }
//                if ( SCR::Read(.target.dir, directory) == nil ) {
//                    boolean res = Popup::AnyQuestion(Label::ErrorMsg(),
//                                        _("The directory does not exist. Create it?"),
//                                        Label::YesButton(), Label::NoButton(), `focus);
//                    if ( res == false ) {
//                        continue;
//                    } else {
//                        y2debug( "Create dir == true" );
//                        createdir = true;
//                    }
//                }
//
//                //create new database
//                map<string,any> db = $[
//                    "suffix"            : suffix,
//                    "directory"         : directory,
//                    "database"          : "bdb",
//                    "createdatabasedir" : createdir
//                ];
//                if( rootdn != "" && (boolean)UI::QueryWidget( `cb_append_basedn, `Value ) )
//                {
//                    rootdn = rootdn+","+suffix;
//                }
//                if( rootdn != "" ) db = add( db, "rootdn", rootdn );
//                if( rootpw != "" )
//                {
//                    db = add( db, "passwd", rootpw );
//                    db = add( db, "cryptmethod", cryptmethod );
//                }
//                if( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ){
//                    boolean hashcleartext = (boolean)UI::QueryWidget( `cb_ppolicy_hashcleartext, `Value );
//                    boolean uselockout = (boolean)UI::QueryWidget( `cb_ppolicy_uselockout, `Value );
//                    string pp_default = (string)UI::QueryWidget( `te_ppolicy_defaultpolicy, `Value );
//                    map<string,any> ppolicy = $[];
//                    if (hashcleartext ) {
//                        ppolicy = add( ppolicy, "ppolicy_hash_cleartext", "");
//                    }
//                    if (uselockout ) {
//                        ppolicy = add( ppolicy, "ppolicy_use_lockout", "");
//                    }
//                    if (pp_default != "" ) {
//                        if( (boolean)UI::QueryWidget( `cb_pp_append_basedn, `Value ) )
//                        {
//                            pp_default = pp_default+","+suffix;
//                        }
//                        db = add(db, "ppolicy_default_changed", "1");
//                        ppolicy = add( ppolicy, "ppolicy_default", pp_default);
//                    }
//                    list<any> pp_overlay = [ "ppolicy", ppolicy ];
//                    list<any> overlays = [ pp_overlay ];
//                    db = add( db, "overlay", overlays);
//
//                    list<string> inclist = LdapServer::ReadSchemaIncludeList();
//                    if(! contains( inclist, "/etc/openldap/schema/ppolicy.schema" ) ){
//                        inclist = add(inclist,  "/etc/openldap/schema/ppolicy.schema" );
//                        LdapServer::WriteSchemaIncludeList(inclist);
//                    }
//                }
//                if( LdapServer::AddDatabase( db ) )
//                {
//                    y2milestone( "adding database was successful, now trying to add widget tree item" );
//                    rebuild_widget_tree = true;
//                    break;
//                } else {
//                    y2milestone( "adding database was not successful" );
//                }
//            }
//        }
//
//        UI::CloseDialog();
//    }

    return true;
}

/*****************************
 ** database handlers
 *****************************/

define boolean cb_check_db()
``{
    string suffix =(string)widget_map[current_tree_item,"name"]:nil;
    y2milestone( "calling db check handler for suffix '%1'", suffix );

    string rootpw = (string)UI::QueryWidget( `te_rootpw, `Value );
    if( rootpw != (string)UI::QueryWidget( `te_valid_rootpw, `Value ) )
    {
            /* Error Popup */
        callback_error = _("Password validation failed.");
        return false;
    }

    return true;
}

define boolean cb_write_db()
``{
    integer index = (integer)widget_map[current_tree_item,"index"]:nil;
    y2milestone( "calling db write handler for '%1'", current_tree_item );

    if( index == nil )
    {
                    /* Error Popup */
        callback_error = _("Unable to write settings for the current database.");
        y2error( "'name' entry for item '%1' is nil", current_tree_item );
        return false;
    }

    map<string,string> db = $[];
    db["rootdn"] = (string)UI::QueryWidget( `te_rootdn, `Value );

    if( db["rootdn"]:"" != "" && (boolean)UI::QueryWidget( `cb_append_basedn, `Value ) )
    {
        string suffix = (string)widget_map[current_tree_item,"name"]:"";
        db["rootdn"] = db["rootdn"]:"" + "," + suffix;
    }

    y2milestone( "updated Database: %1", db );

    boolean res = LdapServer::UpdateDatabase( index, db);

 //   boolean is_new_db = (boolean)widget_map[current_tree_item,"new_db"]:nil;
 //   y2debug( "widget_map entry for item '%1': '%2'", suffix, widget_map[current_tree_item]:nil );
 //   if( is_new_db == nil )
 //   {
 //                   /* Error Popup */
 //       callback_error = _("Unable to write settings for the current database.");
 //       y2error( "'new_db' key for item '%1' is nil", suffix );
 //       return false;
 //   }
 //   map<string,any> dbmap = is_new_db ? LdapServer::ReadDatabaseNEW() : LdapServer::ReadDatabase();
 //   y2debug( "settings map returned by ReadDatabase/ReadDatabaseNEW: %1", dbmap );

 //   map<string,any> db = (map<string,any>)dbmap[suffix]:nil;
 //   if( db == nil )
 //   {
 //                   /* Error Popup */
 //       callback_error = _("Unable to write settings for the current database.");
 //       y2error( "database is not in dbmap returned by ReadDatabase" );
 //       y2debug( "trying to read database '%1', dbmap is: '%2'", suffix, dbmap );
 //       return false;
 //   }

 //   string rootdn = "";
 //   rootdn = String::CutBlanks( (string)UI::QueryWidget( `te_rootdn, `Value ) );
 //   if( rootdn != "" && (boolean)UI::QueryWidget( `cb_append_basedn, `Value ) )
 //   {
 //       rootdn = rootdn + "," + suffix;
 //   }
 //   db["rootdn"] = rootdn;

 //   string rootpw = (string)UI::QueryWidget( `te_rootpw, `Value );
 //   if( rootpw != "" ) {
 //       db["passwd"] = rootpw;
 //       db["cryptmethod"] = (string)UI::QueryWidget( `cb_cryptmethod, `Value );
 //   }

 //   if( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ){
 //       boolean hashcleartext = (boolean)UI::QueryWidget( `cb_ppolicy_hashcleartext, `Value );
 //       boolean uselockout = (boolean)UI::QueryWidget( `cb_ppolicy_uselockout, `Value );
 //       string pp_default = (string)UI::QueryWidget( `te_ppolicy_defaultpolicy, `Value );
 //       map<string,string> ppolicy_old = LdapServer::GetPasswordPolicyOverlay(suffix);
 //       map<string,any> ppolicy = $[];
 //       if (hashcleartext ) {
 //           ppolicy = add( ppolicy, "ppolicy_hash_cleartext", "");
 //       }
 //       if (uselockout) {
 //           ppolicy = add( ppolicy, "ppolicy_use_lockout", "");
 //       }
 //       if (pp_default != "" ) {
 //           if( (boolean)UI::QueryWidget( `cb_pp_append_basedn, `Value ) )
 //           {
 //               pp_default = pp_default+","+suffix;
 //           }
 //           if (pp_default != ppolicy_old["ppolicy_default"]:nil ) {
 //               db = add(db, "ppolicy_default_changed", "1");
 //           }
 //           ppolicy = add( ppolicy, "ppolicy_default", pp_default);
 //       }
 //       list<any> pp_overlay = [ "ppolicy", ppolicy ];
 //       list<any> overlays = [ pp_overlay ];
 //       db = add( db, "overlay", overlays);
 //       list<string> inclist = LdapServer::ReadSchemaIncludeList();
 //       if(! contains( inclist, "/etc/openldap/schema/ppolicy.schema" ) ){
 //           inclist = add(inclist,  "/etc/openldap/schema/ppolicy.schema" );
 //           LdapServer::WriteSchemaIncludeList(inclist);
 //       }
 //   } else {
 //       map<string,string> ppolicy_map = LdapServer::GetPasswordPolicyOverlay(suffix);
 //       if ( ppolicy_map != nil ){
 //           list<any> newoverlay = [];
 //           list<any> empty_pp_ol = ["ppolicy", nil ];
 //           integer i = 0;
 //           foreach( list<any> i, db["overlay"]:[], {
 //               if ((string)i[0]:"" != "ppolicy") {
 //                   newoverlay = add(newoverlay, i);
 //               } else {
 //                   newoverlay = add(newoverlay, empty_pp_ol);
 //               }
 //           });
 //           db["overlay"] = newoverlay;
 //       }
 //   }
 //   string checkResult = LdapServer::CheckDatabase( db );
 //   if( checkResult != "" ) {
 //       callback_error = checkResult;
 //       return false;
 //   }

 //   //write changes
 //   dbmap[suffix] = db;
 //   if( is_new_db )
 //   {
 //       LdapServer::WriteDatabaseNEW( dbmap );
 //   } else
 //   {
 //       LdapServer::WriteDatabase( dbmap );
 //   }

    return true;
}

define boolean cb_read_db()
``{
    y2milestone("cb_read_db current item: %1", current_tree_item);
    integer index = (integer) widget_map[current_tree_item, "index"]:nil;

    if ( index == nil )
    {
        callback_error = _("Unable to read settings for the current database.");
        y2error( "'index' entry for item '%1' is nil", current_tree_item );
        return false;
    }

    map<string, string> db = LdapServer::GetDatabase( index );

//    string suffix = (string)widget_map[current_tree_item,"name"]:nil;
//    if( suffix == nil )
//    {
//                    /* Error Popup */
//        callback_error = _("Unable to read settings for the current database.");
//        y2error( "'name' entry for item '%1' is nil", current_tree_item );
//        return false;
//    }
//    y2milestone( "calling db read handler for suffix '%1'", suffix );
//
//    boolean is_new_db = (boolean)widget_map[current_tree_item,"new_db"]:nil;
//    y2debug( "widget_map entry for item '%1': '%2'", suffix, widget_map[current_tree_item]:nil );
//    if( is_new_db == nil )
//    {
//                    /* Error Popup */
//        callback_error = _("Unable to read settings for the current database.");
//        y2error( "'new_db' key for item '%1' is nil", current_tree_item );
//        return false;
//    }
//    map<string,any> dbmap = is_new_db ? LdapServer::ReadDatabaseNEW() : LdapServer::ReadDatabase();
//    y2debug( "settings map returned by ReadDatabase/ReadDatabaseNEW: %1", dbmap );
//
//    map<string,any> db = (map<string,any>)dbmap[suffix]:nil;
//    if( db == nil )
//    {
//                    /* Error Popup */
//        callback_error = _("Unable to read settings for the current database.");
//        y2error( "Reading settings for database '%1' failed", suffix );
//        return false;
//    }
//
    UI::ChangeWidget( `te_basedn, `Value, db["suffix"]:"" );

    string rootdn = db["rootdn"]:"";
    boolean append_checked = false;
    integer pos = find( rootdn, db["suffix"]:"" );
    if( pos > -1 )
    {
        rootdn = substring( rootdn, 0, pos-1 );
        append_checked = true;
    }
    UI::ChangeWidget( `te_rootdn, `Value, rootdn );
    UI::ChangeWidget( `cb_append_basedn, `Value, append_checked );
//    UI::ChangeWidget( `te_rootpw, `Value, db["passwd"]:"" );
//    UI::ChangeWidget( `te_valid_rootpw, `Value, db["passwd"]:"" );
//    UI::ChangeWidget( `cb_cryptmethod, `Value, (string)db["cryptmethod"]:"SSHA" );
//
//    // Check for ppolicy overlay
//    map<string,string> ppolicy_map = LdapServer::GetPasswordPolicyOverlay(suffix);
//    if ( ppolicy_map != nil ){
//        UI::ChangeWidget( `cb_ppolicy_overlay, `Value, true );
//        string pp_hash_cleartext = ppolicy_map["ppolicy_hash_cleartext"]:nil;
//        string pp_use_lockout = ppolicy_map["ppolicy_use_lockout"]:nil;
//        string pp_default = ppolicy_map["ppolicy_default"]:nil;
//        boolean pp_append_checked = false;
//        integer pos = find( pp_default, suffix );
//        if( pos > -1 )
//        {
//            pp_default = substring( pp_default, 0, pos-1 );
//            pp_append_checked = true;
//        }
//        if ( pp_hash_cleartext != nil ){
//            UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Value, true );
//        } else {
//            UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Value, false );
//        }
//        if ( pp_use_lockout != nil ){
//            UI::ChangeWidget( `cb_ppolicy_uselockout, `Value, true );
//        } else {
//            UI::ChangeWidget( `cb_ppolicy_uselockout, `Value, false );
//        }
//        if ( pp_default != nil ){
//            UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Value, pp_default );
//            UI::ChangeWidget( `cb_pp_append_basedn, `Value, pp_append_checked );
//        } else {
//            UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Value, "" );
//            UI::ChangeWidget( `cb_pp_append_basedn, `Value, true );
//        }
//    } else {
//        UI::ChangeWidget( `cb_ppolicy_overlay, `Value, false );
//        UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
//        UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
//        UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
//    }
    return true;
}

define boolean cb_input_db()
``{
    string suffix = current_tree_item;
    y2milestone( "calling db input handler for suffix '%1'", suffix );
    if ( handler_cmd == `cb_ppolicy_overlay ) {
        if ( UI::QueryWidget( `cb_ppolicy_overlay, `Value ) == true ) {
            UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , true );
            UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , true );
            UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , true );
        } else {
            UI::ChangeWidget( `cb_ppolicy_hashcleartext, `Enabled , false );
            UI::ChangeWidget( `cb_ppolicy_uselockout, `Enabled , false );
            UI::ChangeWidget( `te_ppolicy_defaultpolicy, `Enabled , false );
        }
    }
    return true;
}


/*****************************************
 **     tree structure definition       **
 *****************************************/
widget_map = $[
    "base"  : $[
        "children"  : [ "daemon", "global", "schema" , "databases" ]
    ],
    "daemon" : $[
        "name"      : _("Startup Configuration"),
        "widget"    : dlg_service_new
    ],
    "global" : $[
        "children"  : [ "g_loglevel", "g_allow", "g_tls" ],
                    /* Tree item */
        "name"      : _("Global Settings"),
        "widget"    : `Empty()
    ],
    "schema" : $[
                    /* Tree item */
        "name"      : _("Schema Files"),
        "widget"    : schemaWidget,
        "inclist"   : [],
        "cb_check"  : ``( cb_check_schema() ),
        "cb_read"   : ``( cb_read_schema() ),
        "cb_write"  : ``( cb_write_schema() ),
        "cb_input"  : ``( cb_input_schema() )
    ],
    "g_loglevel" : $[
                    /* Tree item */
        "name"      : _("Log Level Settings"),
        "widget"    : loglevelWidget,
        "cb_check"  : ``( cb_check_loglevel() ),
        "cb_read"   : ``( cb_read_loglevel() ),
        "cb_write"  : ``( cb_write_loglevel() )
    ],
    "g_allow" : $[
                    /* Tree item */
        "name"      : _("Allow/Disallow Features"),
        "widget"    : allowWidget,
        "cb_check"  : ``( cb_check_allow() ),
        "cb_read"   : ``( cb_read_allow() ),
        "cb_write"  : ``( cb_write_allow() )
    ],
    "g_tls" : $[
                    /* Tree item */
        "name"      : _("TLS Settings"),
        "widget"    : tlsWidget,
        "cb_check"  : ``( cb_check_tls() ),
        "cb_read"   : ``( cb_read_tls() ),
        "cb_write"  : ``( cb_write_tls() ),
        "cb_input"  : ``( cb_input_tls() )
    ],
    "databases": $[
                    /* Tree item */
        "name"      : _("Databases"),
        "widget"    : `VBox(
            `RichText( `id( `rt_databases ), "" ),
                                         /* Button Text */
            `PushButton( `id( `pb_add ), _("A&dd Database...") )
        ),
        "dialogs"   : $[
            "adddb" : addDbWidget,
        ],
        "cb_check"  : ``( cb_check_databases() ),
        "cb_read"   : ``( cb_read_databases() ),
        "cb_write"  : ``( cb_write_databases() ),
        "cb_input"  : ``( cb_input_databases() )
    ]
];

/*****************************************
 *      tree generation functions       **
 *****************************************/

void addDatabaseWidgetMap( string suffix, string item_name, integer index, boolean new_db )
{
    if( haskey( widget_map, item_name ) ) return;

    map<string,any> item_map = $[
        "name"      : suffix,
        "index"     : index,
        "widget"    : editBdbDatabase,
        "new_db"    : new_db,
        "dynamic"   : true,
        "help_page" : "database_detail",
        "cb_check"  : ``( cb_check_db() ),
        "cb_read"   : ``( cb_read_db() ),
        "cb_write"  : ``( cb_write_db() ),
        "cb_input"  : ``( cb_input_db() )
    ];
    y2milestone( "adding database item '%1' as '%2'", suffix, item_name );
    widget_map[item_name] = item_map;
    widget_map["databases","children"] = add( widget_map["databases","children"]:[], item_name );
}

void generateDynamicTreeItems()
{
    y2debug( "generating database tree items" );
    //generate database entries

    y2milestone( "calling databases read handler" );
    list<map<string,string> > dblist = LdapServer::GetDatabaseList();
    integer i = 0;
    foreach( map<string,string> db, dblist, {
        string tmp = sformat("%1 (%2)", db["suffix"]:"", db["type"]:"" );
        string name = "database-" + tostring(i);
        addDatabaseWidgetMap( tmp , name, tointeger(db["index"]:"0"),  false );
        i = i+1;
    } );
    y2debug( "databases map is '%1'", (map<string,any>)widget_map["databases"]:$[] );
}

void deleteDynamicTreeItems()
{
    y2milestone( "deleting dynamic tree items" );
    widget_map = filter( string key, map<string,any> val, widget_map, {
        return( !(boolean)val["dynamic"]:false );
    } );

    widget_map["databases","children"] = [];
}

}
